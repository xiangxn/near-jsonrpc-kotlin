/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.PeerInfoView

class PeerInfoViewTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of PeerInfoView
        //val modelInstance = PeerInfoView()

        // to test the property `addr`
        should("test addr") {
            // uncomment below to test the property
            //modelInstance.addr shouldBe ("TODO")
        }

        // to test the property `archival`
        should("test archival") {
            // uncomment below to test the property
            //modelInstance.archival shouldBe ("TODO")
        }

        // to test the property `connectionEstablishedTimeMillis`
        should("test connectionEstablishedTimeMillis") {
            // uncomment below to test the property
            //modelInstance.connectionEstablishedTimeMillis shouldBe ("TODO")
        }

        // to test the property `isHighestBlockInvalid`
        should("test isHighestBlockInvalid") {
            // uncomment below to test the property
            //modelInstance.isHighestBlockInvalid shouldBe ("TODO")
        }

        // to test the property `isOutboundPeer`
        should("test isOutboundPeer") {
            // uncomment below to test the property
            //modelInstance.isOutboundPeer shouldBe ("TODO")
        }

        // to test the property `lastTimePeerRequestedMillis`
        should("test lastTimePeerRequestedMillis") {
            // uncomment below to test the property
            //modelInstance.lastTimePeerRequestedMillis shouldBe ("TODO")
        }

        // to test the property `lastTimeReceivedMessageMillis`
        should("test lastTimeReceivedMessageMillis") {
            // uncomment below to test the property
            //modelInstance.lastTimeReceivedMessageMillis shouldBe ("TODO")
        }

        // to test the property `nonce` - Connection nonce.
        should("test nonce") {
            // uncomment below to test the property
            //modelInstance.nonce shouldBe ("TODO")
        }

        // to test the property `peerId`
        should("test peerId") {
            // uncomment below to test the property
            //modelInstance.peerId shouldBe ("TODO")
        }

        // to test the property `receivedBytesPerSec`
        should("test receivedBytesPerSec") {
            // uncomment below to test the property
            //modelInstance.receivedBytesPerSec shouldBe ("TODO")
        }

        // to test the property `sentBytesPerSec`
        should("test sentBytesPerSec") {
            // uncomment below to test the property
            //modelInstance.sentBytesPerSec shouldBe ("TODO")
        }

        // to test the property `trackedShards`
        should("test trackedShards") {
            // uncomment below to test the property
            //modelInstance.trackedShards shouldBe ("TODO")
        }

        // to test the property `accountId` - NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
        should("test accountId") {
            // uncomment below to test the property
            //modelInstance.accountId shouldBe ("TODO")
        }

        // to test the property `blockHash`
        should("test blockHash") {
            // uncomment below to test the property
            //modelInstance.blockHash shouldBe ("TODO")
        }

        // to test the property `height`
        should("test height") {
            // uncomment below to test the property
            //modelInstance.height shouldBe ("TODO")
        }

    }
}
