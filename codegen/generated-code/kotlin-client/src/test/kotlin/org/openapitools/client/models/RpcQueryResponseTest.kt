/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.RpcQueryResponse
import org.openapitools.client.models.AccessKeyInfoView
import org.openapitools.client.models.AccessKeyList
import org.openapitools.client.models.AccessKeyPermissionView
import org.openapitools.client.models.AccessKeyView
import org.openapitools.client.models.AccountView
import org.openapitools.client.models.CallResult
import org.openapitools.client.models.ContractCodeView
import org.openapitools.client.models.StateItem
import org.openapitools.client.models.ViewStateResult

class RpcQueryResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of RpcQueryResponse
        //val modelInstance = RpcQueryResponse()

        // to test the property `blockHash`
        should("test blockHash") {
            // uncomment below to test the property
            //modelInstance.blockHash shouldBe ("TODO")
        }

        // to test the property `blockHeight`
        should("test blockHeight") {
            // uncomment below to test the property
            //modelInstance.blockHeight shouldBe ("TODO")
        }

        // to test the property `amount`
        should("test amount") {
            // uncomment below to test the property
            //modelInstance.amount shouldBe ("TODO")
        }

        // to test the property `codeHash`
        should("test codeHash") {
            // uncomment below to test the property
            //modelInstance.codeHash shouldBe ("TODO")
        }

        // to test the property `locked`
        should("test locked") {
            // uncomment below to test the property
            //modelInstance.locked shouldBe ("TODO")
        }

        // to test the property `storageUsage`
        should("test storageUsage") {
            // uncomment below to test the property
            //modelInstance.storageUsage shouldBe ("TODO")
        }

        // to test the property `codeBase64`
        should("test codeBase64") {
            // uncomment below to test the property
            //modelInstance.codeBase64 shouldBe ("TODO")
        }

        // to test the property `hash`
        should("test hash") {
            // uncomment below to test the property
            //modelInstance.hash shouldBe ("TODO")
        }

        // to test the property `propertyValues`
        should("test propertyValues") {
            // uncomment below to test the property
            //modelInstance.propertyValues shouldBe ("TODO")
        }

        // to test the property `logs`
        should("test logs") {
            // uncomment below to test the property
            //modelInstance.logs shouldBe ("TODO")
        }

        // to test the property `result`
        should("test result") {
            // uncomment below to test the property
            //modelInstance.result shouldBe ("TODO")
        }

        // to test the property `nonce`
        should("test nonce") {
            // uncomment below to test the property
            //modelInstance.nonce shouldBe ("TODO")
        }

        // to test the property `permission`
        should("test permission") {
            // uncomment below to test the property
            //modelInstance.permission shouldBe ("TODO")
        }

        // to test the property `propertyKeys`
        should("test propertyKeys") {
            // uncomment below to test the property
            //modelInstance.propertyKeys shouldBe ("TODO")
        }

        // to test the property `globalContractAccountId` - NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
        should("test globalContractAccountId") {
            // uncomment below to test the property
            //modelInstance.globalContractAccountId shouldBe ("TODO")
        }

        // to test the property `globalContractHash`
        should("test globalContractHash") {
            // uncomment below to test the property
            //modelInstance.globalContractHash shouldBe ("TODO")
        }

        // to test the property `storagePaidAt` - TODO(2271): deprecated.
        should("test storagePaidAt") {
            // uncomment below to test the property
            //modelInstance.storagePaidAt shouldBe ("TODO")
        }

        // to test the property `proof`
        should("test proof") {
            // uncomment below to test the property
            //modelInstance.proof shouldBe ("TODO")
        }

    }
}
