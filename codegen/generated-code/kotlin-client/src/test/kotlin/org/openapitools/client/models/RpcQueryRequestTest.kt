/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.RpcQueryRequest
import org.openapitools.client.models.BlockId
import org.openapitools.client.models.CallFunctionByBlockId
import org.openapitools.client.models.CallFunctionByFinality
import org.openapitools.client.models.CallFunctionBySyncCheckpoint
import org.openapitools.client.models.Finality
import org.openapitools.client.models.SyncCheckpoint
import org.openapitools.client.models.ViewAccessKeyByBlockId
import org.openapitools.client.models.ViewAccessKeyByFinality
import org.openapitools.client.models.ViewAccessKeyBySyncCheckpoint
import org.openapitools.client.models.ViewAccessKeyListByBlockId
import org.openapitools.client.models.ViewAccessKeyListByFinality
import org.openapitools.client.models.ViewAccessKeyListBySyncCheckpoint
import org.openapitools.client.models.ViewAccountByBlockId
import org.openapitools.client.models.ViewAccountByFinality
import org.openapitools.client.models.ViewAccountBySyncCheckpoint
import org.openapitools.client.models.ViewCodeByBlockId
import org.openapitools.client.models.ViewCodeByFinality
import org.openapitools.client.models.ViewCodeBySyncCheckpoint
import org.openapitools.client.models.ViewGlobalContractCodeByAccountIdByBlockId
import org.openapitools.client.models.ViewGlobalContractCodeByAccountIdByFinality
import org.openapitools.client.models.ViewGlobalContractCodeByAccountIdBySyncCheckpoint
import org.openapitools.client.models.ViewGlobalContractCodeByBlockId
import org.openapitools.client.models.ViewGlobalContractCodeByFinality
import org.openapitools.client.models.ViewGlobalContractCodeBySyncCheckpoint
import org.openapitools.client.models.ViewStateByBlockId
import org.openapitools.client.models.ViewStateByFinality
import org.openapitools.client.models.ViewStateBySyncCheckpoint

class RpcQueryRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of RpcQueryRequest
        //val modelInstance = RpcQueryRequest()

        // to test the property `blockId`
        should("test blockId") {
            // uncomment below to test the property
            //modelInstance.blockId shouldBe ("TODO")
        }

        // to test the property `accountId` - NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
        should("test accountId") {
            // uncomment below to test the property
            //modelInstance.accountId shouldBe ("TODO")
        }

        // to test the property `requestType`
        should("test requestType") {
            // uncomment below to test the property
            //modelInstance.requestType shouldBe ("TODO")
        }

        // to test the property `prefixBase64` - This type is used to mark keys (arrays of bytes) that are queried from store.  NOTE: Currently, this type is only used in the view_client and RPC to be able to transparently pretty-serialize the bytes arrays as base64-encoded strings (see `serialize.rs`).
        should("test prefixBase64") {
            // uncomment below to test the property
            //modelInstance.prefixBase64 shouldBe ("TODO")
        }

        // to test the property `publicKey`
        should("test publicKey") {
            // uncomment below to test the property
            //modelInstance.publicKey shouldBe ("TODO")
        }

        // to test the property `argsBase64` - This type is used to mark function arguments.  NOTE: The main reason for this to exist (except the type-safety) is that the value is transparently serialized and deserialized as a base64-encoded string when serde is used (serde_json).
        should("test argsBase64") {
            // uncomment below to test the property
            //modelInstance.argsBase64 shouldBe ("TODO")
        }

        // to test the property `methodName`
        should("test methodName") {
            // uncomment below to test the property
            //modelInstance.methodName shouldBe ("TODO")
        }

        // to test the property `codeHash`
        should("test codeHash") {
            // uncomment below to test the property
            //modelInstance.codeHash shouldBe ("TODO")
        }

        // to test the property `finality`
        should("test finality") {
            // uncomment below to test the property
            //modelInstance.finality shouldBe ("TODO")
        }

        // to test the property `syncCheckpoint`
        should("test syncCheckpoint") {
            // uncomment below to test the property
            //modelInstance.syncCheckpoint shouldBe ("TODO")
        }

        // to test the property `includeProof`
        should("test includeProof") {
            // uncomment below to test the property
            //modelInstance.includeProof shouldBe ("TODO")
        }

    }
}
