/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ExtCostsConfigView

class ExtCostsConfigViewTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ExtCostsConfigView
        //val modelInstance = ExtCostsConfigView()

        // to test the property `altBn128G1MultiexpBase` - Base cost for multiexp
        should("test altBn128G1MultiexpBase") {
            // uncomment below to test the property
            //modelInstance.altBn128G1MultiexpBase shouldBe ("TODO")
        }

        // to test the property `altBn128G1MultiexpElement` - Per element cost for multiexp
        should("test altBn128G1MultiexpElement") {
            // uncomment below to test the property
            //modelInstance.altBn128G1MultiexpElement shouldBe ("TODO")
        }

        // to test the property `altBn128G1SumBase` - Base cost for sum
        should("test altBn128G1SumBase") {
            // uncomment below to test the property
            //modelInstance.altBn128G1SumBase shouldBe ("TODO")
        }

        // to test the property `altBn128G1SumElement` - Per element cost for sum
        should("test altBn128G1SumElement") {
            // uncomment below to test the property
            //modelInstance.altBn128G1SumElement shouldBe ("TODO")
        }

        // to test the property `altBn128PairingCheckBase` - Base cost for pairing check
        should("test altBn128PairingCheckBase") {
            // uncomment below to test the property
            //modelInstance.altBn128PairingCheckBase shouldBe ("TODO")
        }

        // to test the property `altBn128PairingCheckElement` - Per element cost for pairing check
        should("test altBn128PairingCheckElement") {
            // uncomment below to test the property
            //modelInstance.altBn128PairingCheckElement shouldBe ("TODO")
        }

        // to test the property `base` - Base cost for calling a host function.
        should("test base") {
            // uncomment below to test the property
            //modelInstance.base shouldBe ("TODO")
        }

        // to test the property `bls12381G1MultiexpBase`
        should("test bls12381G1MultiexpBase") {
            // uncomment below to test the property
            //modelInstance.bls12381G1MultiexpBase shouldBe ("TODO")
        }

        // to test the property `bls12381G1MultiexpElement`
        should("test bls12381G1MultiexpElement") {
            // uncomment below to test the property
            //modelInstance.bls12381G1MultiexpElement shouldBe ("TODO")
        }

        // to test the property `bls12381G2MultiexpBase`
        should("test bls12381G2MultiexpBase") {
            // uncomment below to test the property
            //modelInstance.bls12381G2MultiexpBase shouldBe ("TODO")
        }

        // to test the property `bls12381G2MultiexpElement`
        should("test bls12381G2MultiexpElement") {
            // uncomment below to test the property
            //modelInstance.bls12381G2MultiexpElement shouldBe ("TODO")
        }

        // to test the property `bls12381MapFp2ToG2Base`
        should("test bls12381MapFp2ToG2Base") {
            // uncomment below to test the property
            //modelInstance.bls12381MapFp2ToG2Base shouldBe ("TODO")
        }

        // to test the property `bls12381MapFp2ToG2Element`
        should("test bls12381MapFp2ToG2Element") {
            // uncomment below to test the property
            //modelInstance.bls12381MapFp2ToG2Element shouldBe ("TODO")
        }

        // to test the property `bls12381MapFpToG1Base`
        should("test bls12381MapFpToG1Base") {
            // uncomment below to test the property
            //modelInstance.bls12381MapFpToG1Base shouldBe ("TODO")
        }

        // to test the property `bls12381MapFpToG1Element`
        should("test bls12381MapFpToG1Element") {
            // uncomment below to test the property
            //modelInstance.bls12381MapFpToG1Element shouldBe ("TODO")
        }

        // to test the property `bls12381P1DecompressBase`
        should("test bls12381P1DecompressBase") {
            // uncomment below to test the property
            //modelInstance.bls12381P1DecompressBase shouldBe ("TODO")
        }

        // to test the property `bls12381P1DecompressElement`
        should("test bls12381P1DecompressElement") {
            // uncomment below to test the property
            //modelInstance.bls12381P1DecompressElement shouldBe ("TODO")
        }

        // to test the property `bls12381P1SumBase`
        should("test bls12381P1SumBase") {
            // uncomment below to test the property
            //modelInstance.bls12381P1SumBase shouldBe ("TODO")
        }

        // to test the property `bls12381P1SumElement`
        should("test bls12381P1SumElement") {
            // uncomment below to test the property
            //modelInstance.bls12381P1SumElement shouldBe ("TODO")
        }

        // to test the property `bls12381P2DecompressBase`
        should("test bls12381P2DecompressBase") {
            // uncomment below to test the property
            //modelInstance.bls12381P2DecompressBase shouldBe ("TODO")
        }

        // to test the property `bls12381P2DecompressElement`
        should("test bls12381P2DecompressElement") {
            // uncomment below to test the property
            //modelInstance.bls12381P2DecompressElement shouldBe ("TODO")
        }

        // to test the property `bls12381P2SumBase`
        should("test bls12381P2SumBase") {
            // uncomment below to test the property
            //modelInstance.bls12381P2SumBase shouldBe ("TODO")
        }

        // to test the property `bls12381P2SumElement`
        should("test bls12381P2SumElement") {
            // uncomment below to test the property
            //modelInstance.bls12381P2SumElement shouldBe ("TODO")
        }

        // to test the property `bls12381PairingBase`
        should("test bls12381PairingBase") {
            // uncomment below to test the property
            //modelInstance.bls12381PairingBase shouldBe ("TODO")
        }

        // to test the property `bls12381PairingElement`
        should("test bls12381PairingElement") {
            // uncomment below to test the property
            //modelInstance.bls12381PairingElement shouldBe ("TODO")
        }

        // to test the property `contractCompileBase`
        should("test contractCompileBase") {
            // uncomment below to test the property
            //modelInstance.contractCompileBase shouldBe ("TODO")
        }

        // to test the property `contractCompileBytes`
        should("test contractCompileBytes") {
            // uncomment below to test the property
            //modelInstance.contractCompileBytes shouldBe ("TODO")
        }

        // to test the property `contractLoadingBase` - Base cost of loading a pre-compiled contract
        should("test contractLoadingBase") {
            // uncomment below to test the property
            //modelInstance.contractLoadingBase shouldBe ("TODO")
        }

        // to test the property `contractLoadingBytes` - Cost per byte of loading a pre-compiled contract
        should("test contractLoadingBytes") {
            // uncomment below to test the property
            //modelInstance.contractLoadingBytes shouldBe ("TODO")
        }

        // to test the property `ecrecoverBase` - Cost of calling ecrecover
        should("test ecrecoverBase") {
            // uncomment below to test the property
            //modelInstance.ecrecoverBase shouldBe ("TODO")
        }

        // to test the property `ed25519VerifyBase` - Cost of getting ed25519 base
        should("test ed25519VerifyBase") {
            // uncomment below to test the property
            //modelInstance.ed25519VerifyBase shouldBe ("TODO")
        }

        // to test the property `ed25519VerifyByte` - Cost of getting ed25519 per byte
        should("test ed25519VerifyByte") {
            // uncomment below to test the property
            //modelInstance.ed25519VerifyByte shouldBe ("TODO")
        }

        // to test the property `keccak256Base` - Cost of getting sha256 base
        should("test keccak256Base") {
            // uncomment below to test the property
            //modelInstance.keccak256Base shouldBe ("TODO")
        }

        // to test the property `keccak256Byte` - Cost of getting sha256 per byte
        should("test keccak256Byte") {
            // uncomment below to test the property
            //modelInstance.keccak256Byte shouldBe ("TODO")
        }

        // to test the property `keccak512Base` - Cost of getting sha256 base
        should("test keccak512Base") {
            // uncomment below to test the property
            //modelInstance.keccak512Base shouldBe ("TODO")
        }

        // to test the property `keccak512Byte` - Cost of getting sha256 per byte
        should("test keccak512Byte") {
            // uncomment below to test the property
            //modelInstance.keccak512Byte shouldBe ("TODO")
        }

        // to test the property `logBase` - Cost for calling logging.
        should("test logBase") {
            // uncomment below to test the property
            //modelInstance.logBase shouldBe ("TODO")
        }

        // to test the property `logByte` - Cost for logging per byte
        should("test logByte") {
            // uncomment below to test the property
            //modelInstance.logByte shouldBe ("TODO")
        }

        // to test the property `promiseAndBase` - Cost for calling `promise_and`
        should("test promiseAndBase") {
            // uncomment below to test the property
            //modelInstance.promiseAndBase shouldBe ("TODO")
        }

        // to test the property `promiseAndPerPromise` - Cost for calling `promise_and` for each promise
        should("test promiseAndPerPromise") {
            // uncomment below to test the property
            //modelInstance.promiseAndPerPromise shouldBe ("TODO")
        }

        // to test the property `promiseReturn` - Cost for calling `promise_return`
        should("test promiseReturn") {
            // uncomment below to test the property
            //modelInstance.promiseReturn shouldBe ("TODO")
        }

        // to test the property `readCachedTrieNode` - Cost for reading trie node from memory
        should("test readCachedTrieNode") {
            // uncomment below to test the property
            //modelInstance.readCachedTrieNode shouldBe ("TODO")
        }

        // to test the property `readMemoryBase` - Base cost for guest memory read
        should("test readMemoryBase") {
            // uncomment below to test the property
            //modelInstance.readMemoryBase shouldBe ("TODO")
        }

        // to test the property `readMemoryByte` - Cost for guest memory read
        should("test readMemoryByte") {
            // uncomment below to test the property
            //modelInstance.readMemoryByte shouldBe ("TODO")
        }

        // to test the property `readRegisterBase` - Base cost for reading from register
        should("test readRegisterBase") {
            // uncomment below to test the property
            //modelInstance.readRegisterBase shouldBe ("TODO")
        }

        // to test the property `readRegisterByte` - Cost for reading byte from register
        should("test readRegisterByte") {
            // uncomment below to test the property
            //modelInstance.readRegisterByte shouldBe ("TODO")
        }

        // to test the property `ripemd160Base` - Cost of getting ripemd160 base
        should("test ripemd160Base") {
            // uncomment below to test the property
            //modelInstance.ripemd160Base shouldBe ("TODO")
        }

        // to test the property `ripemd160Block` - Cost of getting ripemd160 per message block
        should("test ripemd160Block") {
            // uncomment below to test the property
            //modelInstance.ripemd160Block shouldBe ("TODO")
        }

        // to test the property `sha256Base` - Cost of getting sha256 base
        should("test sha256Base") {
            // uncomment below to test the property
            //modelInstance.sha256Base shouldBe ("TODO")
        }

        // to test the property `sha256Byte` - Cost of getting sha256 per byte
        should("test sha256Byte") {
            // uncomment below to test the property
            //modelInstance.sha256Byte shouldBe ("TODO")
        }

        // to test the property `storageHasKeyBase` - Storage trie check for key existence cost base
        should("test storageHasKeyBase") {
            // uncomment below to test the property
            //modelInstance.storageHasKeyBase shouldBe ("TODO")
        }

        // to test the property `storageHasKeyByte` - Storage trie check for key existence per key byte
        should("test storageHasKeyByte") {
            // uncomment below to test the property
            //modelInstance.storageHasKeyByte shouldBe ("TODO")
        }

        // to test the property `storageIterCreateFromByte` - Create trie range iterator cost per byte of from key.
        should("test storageIterCreateFromByte") {
            // uncomment below to test the property
            //modelInstance.storageIterCreateFromByte shouldBe ("TODO")
        }

        // to test the property `storageIterCreatePrefixBase` - Create trie prefix iterator cost base
        should("test storageIterCreatePrefixBase") {
            // uncomment below to test the property
            //modelInstance.storageIterCreatePrefixBase shouldBe ("TODO")
        }

        // to test the property `storageIterCreatePrefixByte` - Create trie prefix iterator cost per byte.
        should("test storageIterCreatePrefixByte") {
            // uncomment below to test the property
            //modelInstance.storageIterCreatePrefixByte shouldBe ("TODO")
        }

        // to test the property `storageIterCreateRangeBase` - Create trie range iterator cost base
        should("test storageIterCreateRangeBase") {
            // uncomment below to test the property
            //modelInstance.storageIterCreateRangeBase shouldBe ("TODO")
        }

        // to test the property `storageIterCreateToByte` - Create trie range iterator cost per byte of to key.
        should("test storageIterCreateToByte") {
            // uncomment below to test the property
            //modelInstance.storageIterCreateToByte shouldBe ("TODO")
        }

        // to test the property `storageIterNextBase` - Trie iterator per key base cost
        should("test storageIterNextBase") {
            // uncomment below to test the property
            //modelInstance.storageIterNextBase shouldBe ("TODO")
        }

        // to test the property `storageIterNextKeyByte` - Trie iterator next key byte cost
        should("test storageIterNextKeyByte") {
            // uncomment below to test the property
            //modelInstance.storageIterNextKeyByte shouldBe ("TODO")
        }

        // to test the property `storageIterNextValueByte` - Trie iterator next key byte cost
        should("test storageIterNextValueByte") {
            // uncomment below to test the property
            //modelInstance.storageIterNextValueByte shouldBe ("TODO")
        }

        // to test the property `storageLargeReadOverheadBase` - Storage trie read key overhead base cost, when doing large reads
        should("test storageLargeReadOverheadBase") {
            // uncomment below to test the property
            //modelInstance.storageLargeReadOverheadBase shouldBe ("TODO")
        }

        // to test the property `storageLargeReadOverheadByte` - Storage trie read key overhead  per-byte cost, when doing large reads
        should("test storageLargeReadOverheadByte") {
            // uncomment below to test the property
            //modelInstance.storageLargeReadOverheadByte shouldBe ("TODO")
        }

        // to test the property `storageReadBase` - Storage trie read key base cost
        should("test storageReadBase") {
            // uncomment below to test the property
            //modelInstance.storageReadBase shouldBe ("TODO")
        }

        // to test the property `storageReadKeyByte` - Storage trie read key per byte cost
        should("test storageReadKeyByte") {
            // uncomment below to test the property
            //modelInstance.storageReadKeyByte shouldBe ("TODO")
        }

        // to test the property `storageReadValueByte` - Storage trie read value cost per byte cost
        should("test storageReadValueByte") {
            // uncomment below to test the property
            //modelInstance.storageReadValueByte shouldBe ("TODO")
        }

        // to test the property `storageRemoveBase` - Remove key from trie base cost
        should("test storageRemoveBase") {
            // uncomment below to test the property
            //modelInstance.storageRemoveBase shouldBe ("TODO")
        }

        // to test the property `storageRemoveKeyByte` - Remove key from trie per byte cost
        should("test storageRemoveKeyByte") {
            // uncomment below to test the property
            //modelInstance.storageRemoveKeyByte shouldBe ("TODO")
        }

        // to test the property `storageRemoveRetValueByte` - Remove key from trie ret value byte cost
        should("test storageRemoveRetValueByte") {
            // uncomment below to test the property
            //modelInstance.storageRemoveRetValueByte shouldBe ("TODO")
        }

        // to test the property `storageWriteBase` - Storage trie write key base cost
        should("test storageWriteBase") {
            // uncomment below to test the property
            //modelInstance.storageWriteBase shouldBe ("TODO")
        }

        // to test the property `storageWriteEvictedByte` - Storage trie write cost per byte of evicted value.
        should("test storageWriteEvictedByte") {
            // uncomment below to test the property
            //modelInstance.storageWriteEvictedByte shouldBe ("TODO")
        }

        // to test the property `storageWriteKeyByte` - Storage trie write key per byte cost
        should("test storageWriteKeyByte") {
            // uncomment below to test the property
            //modelInstance.storageWriteKeyByte shouldBe ("TODO")
        }

        // to test the property `storageWriteValueByte` - Storage trie write value per byte cost
        should("test storageWriteValueByte") {
            // uncomment below to test the property
            //modelInstance.storageWriteValueByte shouldBe ("TODO")
        }

        // to test the property `touchingTrieNode` - Cost per reading trie node from DB
        should("test touchingTrieNode") {
            // uncomment below to test the property
            //modelInstance.touchingTrieNode shouldBe ("TODO")
        }

        // to test the property `utf16DecodingBase` - Base cost of decoding utf16. It's used for `log_utf16`.
        should("test utf16DecodingBase") {
            // uncomment below to test the property
            //modelInstance.utf16DecodingBase shouldBe ("TODO")
        }

        // to test the property `utf16DecodingByte` - Cost per byte of decoding utf16. It's used for `log_utf16`.
        should("test utf16DecodingByte") {
            // uncomment below to test the property
            //modelInstance.utf16DecodingByte shouldBe ("TODO")
        }

        // to test the property `utf8DecodingBase` - Base cost of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
        should("test utf8DecodingBase") {
            // uncomment below to test the property
            //modelInstance.utf8DecodingBase shouldBe ("TODO")
        }

        // to test the property `utf8DecodingByte` - Cost per byte of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
        should("test utf8DecodingByte") {
            // uncomment below to test the property
            //modelInstance.utf8DecodingByte shouldBe ("TODO")
        }

        // to test the property `validatorStakeBase` - Cost of calling `validator_stake`.
        should("test validatorStakeBase") {
            // uncomment below to test the property
            //modelInstance.validatorStakeBase shouldBe ("TODO")
        }

        // to test the property `validatorTotalStakeBase` - Cost of calling `validator_total_stake`.
        should("test validatorTotalStakeBase") {
            // uncomment below to test the property
            //modelInstance.validatorTotalStakeBase shouldBe ("TODO")
        }

        // to test the property `writeMemoryBase` - Base cost for guest memory write
        should("test writeMemoryBase") {
            // uncomment below to test the property
            //modelInstance.writeMemoryBase shouldBe ("TODO")
        }

        // to test the property `writeMemoryByte` - Cost for guest memory write per byte
        should("test writeMemoryByte") {
            // uncomment below to test the property
            //modelInstance.writeMemoryByte shouldBe ("TODO")
        }

        // to test the property `writeRegisterBase` - Base cost for writing into register
        should("test writeRegisterBase") {
            // uncomment below to test the property
            //modelInstance.writeRegisterBase shouldBe ("TODO")
        }

        // to test the property `writeRegisterByte` - Cost for writing byte into register
        should("test writeRegisterByte") {
            // uncomment below to test the property
            //modelInstance.writeRegisterByte shouldBe ("TODO")
        }

        // to test the property `yieldCreateBase` - Base cost for creating a yield promise.
        should("test yieldCreateBase") {
            // uncomment below to test the property
            //modelInstance.yieldCreateBase shouldBe ("TODO")
        }

        // to test the property `yieldCreateByte` - Per byte cost of arguments and method name.
        should("test yieldCreateByte") {
            // uncomment below to test the property
            //modelInstance.yieldCreateByte shouldBe ("TODO")
        }

        // to test the property `yieldResumeBase` - Base cost for resuming a yield receipt.
        should("test yieldResumeBase") {
            // uncomment below to test the property
            //modelInstance.yieldResumeBase shouldBe ("TODO")
        }

        // to test the property `yieldResumeByte` - Per byte cost of resume payload.
        should("test yieldResumeByte") {
            // uncomment below to test the property
            //modelInstance.yieldResumeByte shouldBe ("TODO")
        }

    }
}
