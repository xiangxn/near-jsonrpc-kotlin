/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ExecutionOutcomeView
import org.openapitools.client.models.ExecutionMetadataView
import org.openapitools.client.models.ExecutionStatusView

class ExecutionOutcomeViewTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ExecutionOutcomeView
        //val modelInstance = ExecutionOutcomeView()

        // to test the property `executorId` - The id of the account on which the execution happens. For transaction this is signer_id, for receipt this is receiver_id.
        should("test executorId") {
            // uncomment below to test the property
            //modelInstance.executorId shouldBe ("TODO")
        }

        // to test the property `gasBurnt` - The amount of the gas burnt by the given transaction or receipt.
        should("test gasBurnt") {
            // uncomment below to test the property
            //modelInstance.gasBurnt shouldBe ("TODO")
        }

        // to test the property `logs` - Logs from this transaction or receipt.
        should("test logs") {
            // uncomment below to test the property
            //modelInstance.logs shouldBe ("TODO")
        }

        // to test the property `receiptIds` - Receipt IDs generated by this transaction or receipt.
        should("test receiptIds") {
            // uncomment below to test the property
            //modelInstance.receiptIds shouldBe ("TODO")
        }

        // to test the property `status` - Execution status. Contains the result in case of successful execution.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `tokensBurnt` - The amount of tokens burnt corresponding to the burnt gas amount. This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because the prepaid gas price might be lower than the actual gas price and it creates a deficit. `tokens_burnt` also contains the penalty subtracted from refunds, while `gas_burnt` only contains the gas that we actually burn for the execution.
        should("test tokensBurnt") {
            // uncomment below to test the property
            //modelInstance.tokensBurnt shouldBe ("TODO")
        }

        // to test the property `metadata` - Execution metadata, versioned
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

    }
}
