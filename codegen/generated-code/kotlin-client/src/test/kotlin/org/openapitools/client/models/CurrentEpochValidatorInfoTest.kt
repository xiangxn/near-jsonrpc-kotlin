/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CurrentEpochValidatorInfo

class CurrentEpochValidatorInfoTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CurrentEpochValidatorInfo
        //val modelInstance = CurrentEpochValidatorInfo()

        // to test the property `accountId` - NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
        should("test accountId") {
            // uncomment below to test the property
            //modelInstance.accountId shouldBe ("TODO")
        }

        // to test the property `isSlashed`
        should("test isSlashed") {
            // uncomment below to test the property
            //modelInstance.isSlashed shouldBe ("TODO")
        }

        // to test the property `numExpectedBlocks`
        should("test numExpectedBlocks") {
            // uncomment below to test the property
            //modelInstance.numExpectedBlocks shouldBe ("TODO")
        }

        // to test the property `numProducedBlocks`
        should("test numProducedBlocks") {
            // uncomment below to test the property
            //modelInstance.numProducedBlocks shouldBe ("TODO")
        }

        // to test the property `publicKey`
        should("test publicKey") {
            // uncomment below to test the property
            //modelInstance.publicKey shouldBe ("TODO")
        }

        // to test the property `shards` - Shards this validator is assigned to as chunk producer in the current epoch.
        should("test shards") {
            // uncomment below to test the property
            //modelInstance.shards shouldBe ("TODO")
        }

        // to test the property `stake`
        should("test stake") {
            // uncomment below to test the property
            //modelInstance.stake shouldBe ("TODO")
        }

        // to test the property `numExpectedChunks`
        should("test numExpectedChunks") {
            // uncomment below to test the property
            //modelInstance.numExpectedChunks shouldBe ("TODO")
        }

        // to test the property `numExpectedChunksPerShard` - Number of chunks this validator was expected to produce in each shard. Each entry in the array corresponds to the shard in the `shards_produced` array.
        should("test numExpectedChunksPerShard") {
            // uncomment below to test the property
            //modelInstance.numExpectedChunksPerShard shouldBe ("TODO")
        }

        // to test the property `numExpectedEndorsements`
        should("test numExpectedEndorsements") {
            // uncomment below to test the property
            //modelInstance.numExpectedEndorsements shouldBe ("TODO")
        }

        // to test the property `numExpectedEndorsementsPerShard` - Number of chunks this validator was expected to validate and endorse in each shard. Each entry in the array corresponds to the shard in the `shards_endorsed` array.
        should("test numExpectedEndorsementsPerShard") {
            // uncomment below to test the property
            //modelInstance.numExpectedEndorsementsPerShard shouldBe ("TODO")
        }

        // to test the property `numProducedChunks`
        should("test numProducedChunks") {
            // uncomment below to test the property
            //modelInstance.numProducedChunks shouldBe ("TODO")
        }

        // to test the property `numProducedChunksPerShard`
        should("test numProducedChunksPerShard") {
            // uncomment below to test the property
            //modelInstance.numProducedChunksPerShard shouldBe ("TODO")
        }

        // to test the property `numProducedEndorsements`
        should("test numProducedEndorsements") {
            // uncomment below to test the property
            //modelInstance.numProducedEndorsements shouldBe ("TODO")
        }

        // to test the property `numProducedEndorsementsPerShard`
        should("test numProducedEndorsementsPerShard") {
            // uncomment below to test the property
            //modelInstance.numProducedEndorsementsPerShard shouldBe ("TODO")
        }

        // to test the property `shardsEndorsed` - Shards this validator is assigned to as chunk validator in the current epoch.
        should("test shardsEndorsed") {
            // uncomment below to test the property
            //modelInstance.shardsEndorsed shouldBe ("TODO")
        }

    }
}
