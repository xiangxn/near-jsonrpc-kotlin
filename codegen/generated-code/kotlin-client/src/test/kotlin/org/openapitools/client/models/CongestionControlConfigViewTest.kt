/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.CongestionControlConfigView

class CongestionControlConfigViewTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CongestionControlConfigView
        //val modelInstance = CongestionControlConfigView()

        // to test the property `allowedShardOutgoingGas` - How much gas the chosen allowed shard can send to a 100% congested shard.  See [`CongestionControlConfig`] for more details.
        should("test allowedShardOutgoingGas") {
            // uncomment below to test the property
            //modelInstance.allowedShardOutgoingGas shouldBe ("TODO")
        }

        // to test the property `maxCongestionIncomingGas` - How much gas in delayed receipts of a shard is 100% incoming congestion.  See [`CongestionControlConfig`] for more details.
        should("test maxCongestionIncomingGas") {
            // uncomment below to test the property
            //modelInstance.maxCongestionIncomingGas shouldBe ("TODO")
        }

        // to test the property `maxCongestionMemoryConsumption` - How much memory space of all delayed and buffered receipts in a shard is considered 100% congested.  See [`CongestionControlConfig`] for more details.
        should("test maxCongestionMemoryConsumption") {
            // uncomment below to test the property
            //modelInstance.maxCongestionMemoryConsumption shouldBe ("TODO")
        }

        // to test the property `maxCongestionMissedChunks` - How many missed chunks in a row in a shard is considered 100% congested.
        should("test maxCongestionMissedChunks") {
            // uncomment below to test the property
            //modelInstance.maxCongestionMissedChunks shouldBe ("TODO")
        }

        // to test the property `maxCongestionOutgoingGas` - How much gas in outgoing buffered receipts of a shard is 100% congested.  Outgoing congestion contributes to overall congestion, which reduces how much other shards are allowed to forward to this shard.
        should("test maxCongestionOutgoingGas") {
            // uncomment below to test the property
            //modelInstance.maxCongestionOutgoingGas shouldBe ("TODO")
        }

        // to test the property `maxOutgoingGas` - The maximum amount of gas attached to receipts a shard can forward to another shard per chunk.  See [`CongestionControlConfig`] for more details.
        should("test maxOutgoingGas") {
            // uncomment below to test the property
            //modelInstance.maxOutgoingGas shouldBe ("TODO")
        }

        // to test the property `maxTxGas` - The maximum amount of gas in a chunk spent on converting new transactions to receipts.  See [`CongestionControlConfig`] for more details.
        should("test maxTxGas") {
            // uncomment below to test the property
            //modelInstance.maxTxGas shouldBe ("TODO")
        }

        // to test the property `minOutgoingGas` - The minimum gas each shard can send to a shard that is not fully congested.  See [`CongestionControlConfig`] for more details.
        should("test minOutgoingGas") {
            // uncomment below to test the property
            //modelInstance.minOutgoingGas shouldBe ("TODO")
        }

        // to test the property `minTxGas` - The minimum amount of gas in a chunk spent on converting new transactions to receipts, as long as the receiving shard is not congested.  See [`CongestionControlConfig`] for more details.
        should("test minTxGas") {
            // uncomment below to test the property
            //modelInstance.minTxGas shouldBe ("TODO")
        }

        // to test the property `outgoingReceiptsBigSizeLimit` - Large size limit for outgoing receipts to a shard, used when it's safe to send a lot of receipts without making the state witness too large. It limits the total sum of outgoing receipts, not individual receipts.
        should("test outgoingReceiptsBigSizeLimit") {
            // uncomment below to test the property
            //modelInstance.outgoingReceiptsBigSizeLimit shouldBe ("TODO")
        }

        // to test the property `outgoingReceiptsUsualSizeLimit` - The standard size limit for outgoing receipts aimed at a single shard. This limit is pretty small to keep the size of source_receipt_proofs under control. It limits the total sum of outgoing receipts, not individual receipts.
        should("test outgoingReceiptsUsualSizeLimit") {
            // uncomment below to test the property
            //modelInstance.outgoingReceiptsUsualSizeLimit shouldBe ("TODO")
        }

        // to test the property `rejectTxCongestionThreshold` - How much congestion a shard can tolerate before it stops all shards from accepting new transactions with the receiver set to the congested shard.
        should("test rejectTxCongestionThreshold") {
            // uncomment below to test the property
            //modelInstance.rejectTxCongestionThreshold shouldBe ("TODO")
        }

    }
}
