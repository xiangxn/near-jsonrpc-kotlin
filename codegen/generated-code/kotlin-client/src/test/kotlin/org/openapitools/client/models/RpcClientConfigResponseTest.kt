/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.RpcClientConfigResponse
import org.openapitools.client.models.ChunkDistributionNetworkConfig
import org.openapitools.client.models.CloudArchivalReaderConfig
import org.openapitools.client.models.CloudArchivalWriterConfig
import org.openapitools.client.models.EpochSyncConfig
import org.openapitools.client.models.GCConfig
import org.openapitools.client.models.LogSummaryStyle
import org.openapitools.client.models.ProtocolVersionCheckConfig
import org.openapitools.client.models.StateSyncConfig
import org.openapitools.client.models.TrackedShardsConfig
import org.openapitools.client.models.Version

class RpcClientConfigResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of RpcClientConfigResponse
        //val modelInstance = RpcClientConfigResponse()

        // to test the property `archive` - Not clear old data, set `true` for archive nodes.
        should("test archive") {
            // uncomment below to test the property
            //modelInstance.archive shouldBe ("TODO")
        }

        // to test the property `blockFetchHorizon` - Horizon at which instead of fetching block, fetch full state.
        should("test blockFetchHorizon") {
            // uncomment below to test the property
            //modelInstance.blockFetchHorizon shouldBe ("TODO")
        }

        // to test the property `blockHeaderFetchHorizon` - Behind this horizon header fetch kicks in.
        should("test blockHeaderFetchHorizon") {
            // uncomment below to test the property
            //modelInstance.blockHeaderFetchHorizon shouldBe ("TODO")
        }

        // to test the property `blockProductionTrackingDelay` - Duration to check for producing / skipping block.
        should("test blockProductionTrackingDelay") {
            // uncomment below to test the property
            //modelInstance.blockProductionTrackingDelay shouldBe ("TODO")
        }

        // to test the property `catchupStepPeriod` - Time between check to perform catchup.
        should("test catchupStepPeriod") {
            // uncomment below to test the property
            //modelInstance.catchupStepPeriod shouldBe ("TODO")
        }

        // to test the property `chainId` - Chain id for status.
        should("test chainId") {
            // uncomment below to test the property
            //modelInstance.chainId shouldBe ("TODO")
        }

        // to test the property `chunkRequestRetryPeriod` - Time between checking to re-request chunks.
        should("test chunkRequestRetryPeriod") {
            // uncomment below to test the property
            //modelInstance.chunkRequestRetryPeriod shouldBe ("TODO")
        }

        // to test the property `chunkValidationThreads` - Number of threads for ChunkValidationActor pool.
        should("test chunkValidationThreads") {
            // uncomment below to test the property
            //modelInstance.chunkValidationThreads shouldBe ("TODO")
        }

        // to test the property `chunkWaitMult` - Multiplier for the wait time for all chunks to be received.
        should("test chunkWaitMult") {
            // uncomment below to test the property
            //modelInstance.chunkWaitMult shouldBe ("TODO")
        }

        // to test the property `clientBackgroundMigrationThreads` - Number of threads to execute background migration work in client.
        should("test clientBackgroundMigrationThreads") {
            // uncomment below to test the property
            //modelInstance.clientBackgroundMigrationThreads shouldBe ("TODO")
        }

        // to test the property `doomslugStepPeriod` - Time between running doomslug timer.
        should("test doomslugStepPeriod") {
            // uncomment below to test the property
            //modelInstance.doomslugStepPeriod shouldBe ("TODO")
        }

        // to test the property `enableMultilineLogging`
        should("test enableMultilineLogging") {
            // uncomment below to test the property
            //modelInstance.enableMultilineLogging shouldBe ("TODO")
        }

        // to test the property `enableStatisticsExport` - Re-export storage layer statistics as prometheus metrics.
        should("test enableStatisticsExport") {
            // uncomment below to test the property
            //modelInstance.enableStatisticsExport shouldBe ("TODO")
        }

        // to test the property `epochLength` - Epoch length.
        should("test epochLength") {
            // uncomment below to test the property
            //modelInstance.epochLength shouldBe ("TODO")
        }

        // to test the property `epochSync` - Options for epoch sync.
        should("test epochSync") {
            // uncomment below to test the property
            //modelInstance.epochSync shouldBe ("TODO")
        }

        // to test the property `expectedShutdown` - Graceful shutdown at expected block height.
        should("test expectedShutdown") {
            // uncomment below to test the property
            //modelInstance.expectedShutdown shouldBe ("TODO")
        }

        // to test the property `gc` - Garbage collection configuration.
        should("test gc") {
            // uncomment below to test the property
            //modelInstance.gc shouldBe ("TODO")
        }

        // to test the property `headerSyncExpectedHeightPerSecond` - Expected increase of header head height per second during header sync
        should("test headerSyncExpectedHeightPerSecond") {
            // uncomment below to test the property
            //modelInstance.headerSyncExpectedHeightPerSecond shouldBe ("TODO")
        }

        // to test the property `headerSyncInitialTimeout` - How much time to wait after initial header sync
        should("test headerSyncInitialTimeout") {
            // uncomment below to test the property
            //modelInstance.headerSyncInitialTimeout shouldBe ("TODO")
        }

        // to test the property `headerSyncProgressTimeout` - How much time to wait after some progress is made in header sync
        should("test headerSyncProgressTimeout") {
            // uncomment below to test the property
            //modelInstance.headerSyncProgressTimeout shouldBe ("TODO")
        }

        // to test the property `headerSyncStallBanTimeout` - How much time to wait before banning a peer in header sync if sync is too slow
        should("test headerSyncStallBanTimeout") {
            // uncomment below to test the property
            //modelInstance.headerSyncStallBanTimeout shouldBe ("TODO")
        }

        // to test the property `logSummaryPeriod` - Period between logging summary information.
        should("test logSummaryPeriod") {
            // uncomment below to test the property
            //modelInstance.logSummaryPeriod shouldBe ("TODO")
        }

        // to test the property `logSummaryStyle` - Enable coloring of the logs
        should("test logSummaryStyle") {
            // uncomment below to test the property
            //modelInstance.logSummaryStyle shouldBe ("TODO")
        }

        // to test the property `maxBlockProductionDelay` - Maximum wait for approvals before producing block.
        should("test maxBlockProductionDelay") {
            // uncomment below to test the property
            //modelInstance.maxBlockProductionDelay shouldBe ("TODO")
        }

        // to test the property `maxBlockWaitDelay` - Maximum duration before skipping given height.
        should("test maxBlockWaitDelay") {
            // uncomment below to test the property
            //modelInstance.maxBlockWaitDelay shouldBe ("TODO")
        }

        // to test the property `minBlockProductionDelay` - Minimum duration before producing block.
        should("test minBlockProductionDelay") {
            // uncomment below to test the property
            //modelInstance.minBlockProductionDelay shouldBe ("TODO")
        }

        // to test the property `minNumPeers` - Minimum number of peers to start syncing.
        should("test minNumPeers") {
            // uncomment below to test the property
            //modelInstance.minNumPeers shouldBe ("TODO")
        }

        // to test the property `numBlockProducerSeats` - Number of block producer seats
        should("test numBlockProducerSeats") {
            // uncomment below to test the property
            //modelInstance.numBlockProducerSeats shouldBe ("TODO")
        }

        // to test the property `orphanStateWitnessMaxSize` - Maximum size of state witnesses in the OrphanStateWitnessPool.  We keep only orphan witnesses which are smaller than this size. This limits the maximum memory usage of OrphanStateWitnessPool.
        should("test orphanStateWitnessMaxSize") {
            // uncomment below to test the property
            //modelInstance.orphanStateWitnessMaxSize shouldBe ("TODO")
        }

        // to test the property `orphanStateWitnessPoolSize` - OrphanStateWitnessPool keeps instances of ChunkStateWitness which can't be processed because the previous block isn't available. The witnesses wait in the pool until the required block appears. This variable controls how many witnesses can be stored in the pool.
        should("test orphanStateWitnessPoolSize") {
            // uncomment below to test the property
            //modelInstance.orphanStateWitnessPoolSize shouldBe ("TODO")
        }

        // to test the property `produceChunkAddTransactionsTimeLimit` - Limit the time of adding transactions to a chunk. A node produces a chunk by adding transactions from the transaction pool until some limit is reached. This time limit ensures that adding transactions won't take longer than the specified duration, which helps to produce the chunk quickly.
        should("test produceChunkAddTransactionsTimeLimit") {
            // uncomment below to test the property
            //modelInstance.produceChunkAddTransactionsTimeLimit shouldBe ("TODO")
        }

        // to test the property `produceEmptyBlocks` - Produce empty blocks, use `false` for testing.
        should("test produceEmptyBlocks") {
            // uncomment below to test the property
            //modelInstance.produceEmptyBlocks shouldBe ("TODO")
        }

        // to test the property `protocolVersionCheck` - Determines whether client should exit if the protocol version is not supported for the next or next next epoch.
        should("test protocolVersionCheck") {
            // uncomment below to test the property
            //modelInstance.protocolVersionCheck shouldBe ("TODO")
        }

        // to test the property `reshardingConfig`
        should("test reshardingConfig") {
            // uncomment below to test the property
            //modelInstance.reshardingConfig shouldBe ("TODO")
        }

        // to test the property `saveInvalidWitnesses` - Save observed instances of invalid ChunkStateWitness to the database in DBCol::InvalidChunkStateWitnesses. Saving invalid witnesses is useful for analysis and debugging. This option can cause extra load on the database and is not recommended for production use.
        should("test saveInvalidWitnesses") {
            // uncomment below to test the property
            //modelInstance.saveInvalidWitnesses shouldBe ("TODO")
        }

        // to test the property `saveLatestWitnesses` - Save observed instances of ChunkStateWitness to the database in DBCol::LatestChunkStateWitnesses. Saving the latest witnesses is useful for analysis and debugging. This option can cause extra load on the database and is not recommended for production use.
        should("test saveLatestWitnesses") {
            // uncomment below to test the property
            //modelInstance.saveLatestWitnesses shouldBe ("TODO")
        }

        // to test the property `saveTrieChanges` - save_trie_changes should be set to true iff - archive if false - non-archival nodes need trie changes to perform garbage collection - archive is true, cold_store is configured and migration to split_storage is finished - node working in split storage mode needs trie changes in order to do garbage collection on hot.
        should("test saveTrieChanges") {
            // uncomment below to test the property
            //modelInstance.saveTrieChanges shouldBe ("TODO")
        }

        // to test the property `saveTxOutcomes` - Whether to persist transaction outcomes to disk or not.
        should("test saveTxOutcomes") {
            // uncomment below to test the property
            //modelInstance.saveTxOutcomes shouldBe ("TODO")
        }

        // to test the property `skipSyncWait` - Skip waiting for sync (for testing or single node testnet).
        should("test skipSyncWait") {
            // uncomment below to test the property
            //modelInstance.skipSyncWait shouldBe ("TODO")
        }

        // to test the property `stateRequestServerThreads` - Number of threads for StateRequestActor pool.
        should("test stateRequestServerThreads") {
            // uncomment below to test the property
            //modelInstance.stateRequestServerThreads shouldBe ("TODO")
        }

        // to test the property `stateRequestThrottlePeriod` - Number of seconds between state requests for view client. Throttling window for state requests (headers and parts).
        should("test stateRequestThrottlePeriod") {
            // uncomment below to test the property
            //modelInstance.stateRequestThrottlePeriod shouldBe ("TODO")
        }

        // to test the property `stateRequestsPerThrottlePeriod` - Maximum number of state requests served per throttle period
        should("test stateRequestsPerThrottlePeriod") {
            // uncomment below to test the property
            //modelInstance.stateRequestsPerThrottlePeriod shouldBe ("TODO")
        }

        // to test the property `stateSync` - Options for syncing state.
        should("test stateSync") {
            // uncomment below to test the property
            //modelInstance.stateSync shouldBe ("TODO")
        }

        // to test the property `stateSyncEnabled` - Whether to use the State Sync mechanism. If disabled, the node will do Block Sync instead of State Sync.
        should("test stateSyncEnabled") {
            // uncomment below to test the property
            //modelInstance.stateSyncEnabled shouldBe ("TODO")
        }

        // to test the property `stateSyncExternalBackoff` - Additional waiting period after a failed request to external storage
        should("test stateSyncExternalBackoff") {
            // uncomment below to test the property
            //modelInstance.stateSyncExternalBackoff shouldBe ("TODO")
        }

        // to test the property `stateSyncExternalTimeout` - How long to wait for a response from centralized state sync
        should("test stateSyncExternalTimeout") {
            // uncomment below to test the property
            //modelInstance.stateSyncExternalTimeout shouldBe ("TODO")
        }

        // to test the property `stateSyncP2pTimeout` - How long to wait for a response from p2p state sync
        should("test stateSyncP2pTimeout") {
            // uncomment below to test the property
            //modelInstance.stateSyncP2pTimeout shouldBe ("TODO")
        }

        // to test the property `stateSyncRetryBackoff` - How long to wait after a failed state sync request
        should("test stateSyncRetryBackoff") {
            // uncomment below to test the property
            //modelInstance.stateSyncRetryBackoff shouldBe ("TODO")
        }

        // to test the property `syncCheckPeriod` - How often to check that we are not out of sync.
        should("test syncCheckPeriod") {
            // uncomment below to test the property
            //modelInstance.syncCheckPeriod shouldBe ("TODO")
        }

        // to test the property `syncHeightThreshold` - Sync height threshold: below this difference in height don't start syncing.
        should("test syncHeightThreshold") {
            // uncomment below to test the property
            //modelInstance.syncHeightThreshold shouldBe ("TODO")
        }

        // to test the property `syncMaxBlockRequests` - Maximum number of block requests to send to peers to sync
        should("test syncMaxBlockRequests") {
            // uncomment below to test the property
            //modelInstance.syncMaxBlockRequests shouldBe ("TODO")
        }

        // to test the property `syncStepPeriod` - While syncing, how long to check for each step.
        should("test syncStepPeriod") {
            // uncomment below to test the property
            //modelInstance.syncStepPeriod shouldBe ("TODO")
        }

        // to test the property `trackedShardsConfig`
        should("test trackedShardsConfig") {
            // uncomment below to test the property
            //modelInstance.trackedShardsConfig shouldBe ("TODO")
        }

        // to test the property `transactionRequestHandlerThreads`
        should("test transactionRequestHandlerThreads") {
            // uncomment below to test the property
            //modelInstance.transactionRequestHandlerThreads shouldBe ("TODO")
        }

        // to test the property `ttlAccountIdRouter` - Time to persist Accounts Id in the router without removing them.
        should("test ttlAccountIdRouter") {
            // uncomment below to test the property
            //modelInstance.ttlAccountIdRouter shouldBe ("TODO")
        }

        // to test the property `txRoutingHeightHorizon` - If the node is not a chunk producer within that many blocks, then route to upcoming chunk producers.
        should("test txRoutingHeightHorizon") {
            // uncomment below to test the property
            //modelInstance.txRoutingHeightHorizon shouldBe ("TODO")
        }

        // to test the property `version` - Version of the binary.
        should("test version") {
            // uncomment below to test the property
            //modelInstance.version shouldBe ("TODO")
        }

        // to test the property `viewClientThreads` - Number of threads for ViewClientActor pool.
        should("test viewClientThreads") {
            // uncomment below to test the property
            //modelInstance.viewClientThreads shouldBe ("TODO")
        }

        // to test the property `chunkDistributionNetwork`
        should("test chunkDistributionNetwork") {
            // uncomment below to test the property
            //modelInstance.chunkDistributionNetwork shouldBe ("TODO")
        }

        // to test the property `cloudArchivalReader`
        should("test cloudArchivalReader") {
            // uncomment below to test the property
            //modelInstance.cloudArchivalReader shouldBe ("TODO")
        }

        // to test the property `cloudArchivalWriter`
        should("test cloudArchivalWriter") {
            // uncomment below to test the property
            //modelInstance.cloudArchivalWriter shouldBe ("TODO")
        }

        // to test the property `maxGasBurntView`
        should("test maxGasBurntView") {
            // uncomment below to test the property
            //modelInstance.maxGasBurntView shouldBe ("TODO")
        }

        // to test the property `rpcAddr` - Listening rpc port for status.
        should("test rpcAddr") {
            // uncomment below to test the property
            //modelInstance.rpcAddr shouldBe ("TODO")
        }

        // to test the property `transactionPoolSizeLimit` - Limit of the size of per-shard transaction pool measured in bytes. If not set, the size will be unbounded.
        should("test transactionPoolSizeLimit") {
            // uncomment below to test the property
            //modelInstance.transactionPoolSizeLimit shouldBe ("TODO")
        }

        // to test the property `trieViewerStateSizeLimit` - Upper bound of the byte size of contract state that is still viewable. None is no limit
        should("test trieViewerStateSizeLimit") {
            // uncomment below to test the property
            //modelInstance.trieViewerStateSizeLimit shouldBe ("TODO")
        }

    }
}
