/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.RpcProtocolConfigResponse
import org.openapitools.client.models.RuntimeConfigView
import org.openapitools.client.models.ShardLayout

class RpcProtocolConfigResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of RpcProtocolConfigResponse
        //val modelInstance = RpcProtocolConfigResponse()

        // to test the property `avgHiddenValidatorSeatsPerShard` - Expected number of hidden validators per shard.
        should("test avgHiddenValidatorSeatsPerShard") {
            // uncomment below to test the property
            //modelInstance.avgHiddenValidatorSeatsPerShard shouldBe ("TODO")
        }

        // to test the property `blockProducerKickoutThreshold` - Threshold for kicking out block producers, between 0 and 100.
        should("test blockProducerKickoutThreshold") {
            // uncomment below to test the property
            //modelInstance.blockProducerKickoutThreshold shouldBe ("TODO")
        }

        // to test the property `chainId` - ID of the blockchain. This must be unique for every blockchain. If your testnet blockchains do not have unique chain IDs, you will have a bad time.
        should("test chainId") {
            // uncomment below to test the property
            //modelInstance.chainId shouldBe ("TODO")
        }

        // to test the property `chunkProducerKickoutThreshold` - Threshold for kicking out chunk producers, between 0 and 100.
        should("test chunkProducerKickoutThreshold") {
            // uncomment below to test the property
            //modelInstance.chunkProducerKickoutThreshold shouldBe ("TODO")
        }

        // to test the property `chunkValidatorOnlyKickoutThreshold` - Threshold for kicking out nodes which are only chunk validators, between 0 and 100.
        should("test chunkValidatorOnlyKickoutThreshold") {
            // uncomment below to test the property
            //modelInstance.chunkValidatorOnlyKickoutThreshold shouldBe ("TODO")
        }

        // to test the property `dynamicResharding` - Enable dynamic re-sharding.
        should("test dynamicResharding") {
            // uncomment below to test the property
            //modelInstance.dynamicResharding shouldBe ("TODO")
        }

        // to test the property `epochLength` - Epoch length counted in block heights.
        should("test epochLength") {
            // uncomment below to test the property
            //modelInstance.epochLength shouldBe ("TODO")
        }

        // to test the property `fishermenThreshold` - Fishermen stake threshold.
        should("test fishermenThreshold") {
            // uncomment below to test the property
            //modelInstance.fishermenThreshold shouldBe ("TODO")
        }

        // to test the property `gasLimit` - Initial gas limit.
        should("test gasLimit") {
            // uncomment below to test the property
            //modelInstance.gasLimit shouldBe ("TODO")
        }

        // to test the property `gasPriceAdjustmentRate` - Gas price adjustment rate
        should("test gasPriceAdjustmentRate") {
            // uncomment below to test the property
            //modelInstance.gasPriceAdjustmentRate shouldBe ("TODO")
        }

        // to test the property `genesisHeight` - Height of genesis block.
        should("test genesisHeight") {
            // uncomment below to test the property
            //modelInstance.genesisHeight shouldBe ("TODO")
        }

        // to test the property `genesisTime` - Official time of blockchain start.
        should("test genesisTime") {
            // uncomment below to test the property
            //modelInstance.genesisTime shouldBe ("TODO")
        }

        // to test the property `maxGasPrice` - Maximum gas price.
        should("test maxGasPrice") {
            // uncomment below to test the property
            //modelInstance.maxGasPrice shouldBe ("TODO")
        }

        // to test the property `maxInflationRate` - Maximum inflation on the total supply every epoch.
        should("test maxInflationRate") {
            // uncomment below to test the property
            //modelInstance.maxInflationRate shouldBe ("TODO")
        }

        // to test the property `maxKickoutStakePerc` - Max stake percentage of the validators we will kick out.
        should("test maxKickoutStakePerc") {
            // uncomment below to test the property
            //modelInstance.maxKickoutStakePerc shouldBe ("TODO")
        }

        // to test the property `minGasPrice` - Minimum gas price. It is also the initial gas price.
        should("test minGasPrice") {
            // uncomment below to test the property
            //modelInstance.minGasPrice shouldBe ("TODO")
        }

        // to test the property `minimumStakeDivisor` - The minimum stake required for staking is last seat price divided by this number.
        should("test minimumStakeDivisor") {
            // uncomment below to test the property
            //modelInstance.minimumStakeDivisor shouldBe ("TODO")
        }

        // to test the property `minimumStakeRatio` - The lowest ratio s/s_total any block producer can have. See <https://github.com/near/NEPs/pull/167> for details
        should("test minimumStakeRatio") {
            // uncomment below to test the property
            //modelInstance.minimumStakeRatio shouldBe ("TODO")
        }

        // to test the property `minimumValidatorsPerShard` - The minimum number of validators each shard must have
        should("test minimumValidatorsPerShard") {
            // uncomment below to test the property
            //modelInstance.minimumValidatorsPerShard shouldBe ("TODO")
        }

        // to test the property `numBlockProducerSeats` - Number of block producer seats at genesis.
        should("test numBlockProducerSeats") {
            // uncomment below to test the property
            //modelInstance.numBlockProducerSeats shouldBe ("TODO")
        }

        // to test the property `numBlockProducerSeatsPerShard` - Defines number of shards and number of block producer seats per each shard at genesis.
        should("test numBlockProducerSeatsPerShard") {
            // uncomment below to test the property
            //modelInstance.numBlockProducerSeatsPerShard shouldBe ("TODO")
        }

        // to test the property `numBlocksPerYear` - Expected number of blocks per year
        should("test numBlocksPerYear") {
            // uncomment below to test the property
            //modelInstance.numBlocksPerYear shouldBe ("TODO")
        }

        // to test the property `onlineMaxThreshold` - Online maximum threshold above which validator gets full reward.
        should("test onlineMaxThreshold") {
            // uncomment below to test the property
            //modelInstance.onlineMaxThreshold shouldBe ("TODO")
        }

        // to test the property `onlineMinThreshold` - Online minimum threshold below which validator doesn't receive reward.
        should("test onlineMinThreshold") {
            // uncomment below to test the property
            //modelInstance.onlineMinThreshold shouldBe ("TODO")
        }

        // to test the property `protocolRewardRate` - Protocol treasury rate
        should("test protocolRewardRate") {
            // uncomment below to test the property
            //modelInstance.protocolRewardRate shouldBe ("TODO")
        }

        // to test the property `protocolTreasuryAccount` - Protocol treasury account
        should("test protocolTreasuryAccount") {
            // uncomment below to test the property
            //modelInstance.protocolTreasuryAccount shouldBe ("TODO")
        }

        // to test the property `protocolUpgradeStakeThreshold` - Threshold of stake that needs to indicate that they ready for upgrade.
        should("test protocolUpgradeStakeThreshold") {
            // uncomment below to test the property
            //modelInstance.protocolUpgradeStakeThreshold shouldBe ("TODO")
        }

        // to test the property `protocolVersion` - Current Protocol Version
        should("test protocolVersion") {
            // uncomment below to test the property
            //modelInstance.protocolVersion shouldBe ("TODO")
        }

        // to test the property `runtimeConfig` - Runtime configuration (mostly economics constants).
        should("test runtimeConfig") {
            // uncomment below to test the property
            //modelInstance.runtimeConfig shouldBe ("TODO")
        }

        // to test the property `shardLayout` - Layout information regarding how to split accounts to shards
        should("test shardLayout") {
            // uncomment below to test the property
            //modelInstance.shardLayout shouldBe ("TODO")
        }

        // to test the property `shuffleShardAssignmentForChunkProducers` - If true, shuffle the chunk producers across shards. In other words, if the shard assignments were `[S_0, S_1, S_2, S_3]` where `S_i` represents the set of chunk producers for shard `i`, if this flag were true, the shard assignments might become, for example, `[S_2, S_0, S_3, S_1]`.
        should("test shuffleShardAssignmentForChunkProducers") {
            // uncomment below to test the property
            //modelInstance.shuffleShardAssignmentForChunkProducers shouldBe ("TODO")
        }

        // to test the property `targetValidatorMandatesPerShard` - Number of target chunk validator mandates for each shard.
        should("test targetValidatorMandatesPerShard") {
            // uncomment below to test the property
            //modelInstance.targetValidatorMandatesPerShard shouldBe ("TODO")
        }

        // to test the property `transactionValidityPeriod` - Number of blocks for which a given transaction is valid
        should("test transactionValidityPeriod") {
            // uncomment below to test the property
            //modelInstance.transactionValidityPeriod shouldBe ("TODO")
        }

    }
}
