/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ActionCreationConfigView
import org.openapitools.client.models.AccessKeyCreationConfigView
import org.openapitools.client.models.Fee

class ActionCreationConfigViewTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ActionCreationConfigView
        //val modelInstance = ActionCreationConfigView()

        // to test the property `addKeyCost` - Base cost of adding a key.
        should("test addKeyCost") {
            // uncomment below to test the property
            //modelInstance.addKeyCost shouldBe ("TODO")
        }

        // to test the property `createAccountCost` - Base cost of creating an account.
        should("test createAccountCost") {
            // uncomment below to test the property
            //modelInstance.createAccountCost shouldBe ("TODO")
        }

        // to test the property `delegateCost` - Base cost for processing a delegate action.  This is on top of the costs for the actions inside the delegate action.
        should("test delegateCost") {
            // uncomment below to test the property
            //modelInstance.delegateCost shouldBe ("TODO")
        }

        // to test the property `deleteAccountCost` - Base cost of deleting an account.
        should("test deleteAccountCost") {
            // uncomment below to test the property
            //modelInstance.deleteAccountCost shouldBe ("TODO")
        }

        // to test the property `deleteKeyCost` - Base cost of deleting a key.
        should("test deleteKeyCost") {
            // uncomment below to test the property
            //modelInstance.deleteKeyCost shouldBe ("TODO")
        }

        // to test the property `deployContractCost` - Base cost of deploying a contract.
        should("test deployContractCost") {
            // uncomment below to test the property
            //modelInstance.deployContractCost shouldBe ("TODO")
        }

        // to test the property `deployContractCostPerByte` - Cost per byte of deploying a contract.
        should("test deployContractCostPerByte") {
            // uncomment below to test the property
            //modelInstance.deployContractCostPerByte shouldBe ("TODO")
        }

        // to test the property `functionCallCost` - Base cost of calling a function.
        should("test functionCallCost") {
            // uncomment below to test the property
            //modelInstance.functionCallCost shouldBe ("TODO")
        }

        // to test the property `functionCallCostPerByte` - Cost per byte of method name and arguments of calling a function.
        should("test functionCallCostPerByte") {
            // uncomment below to test the property
            //modelInstance.functionCallCostPerByte shouldBe ("TODO")
        }

        // to test the property `stakeCost` - Base cost of staking.
        should("test stakeCost") {
            // uncomment below to test the property
            //modelInstance.stakeCost shouldBe ("TODO")
        }

        // to test the property `transferCost` - Base cost of making a transfer.
        should("test transferCost") {
            // uncomment below to test the property
            //modelInstance.transferCost shouldBe ("TODO")
        }

    }
}
