/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ActionErrorKind
import org.openapitools.client.models.ActionErrorKindOneOf
import org.openapitools.client.models.ActionErrorKindOneOf1
import org.openapitools.client.models.ActionErrorKindOneOf10
import org.openapitools.client.models.ActionErrorKindOneOf10TriesToStake
import org.openapitools.client.models.ActionErrorKindOneOf11
import org.openapitools.client.models.ActionErrorKindOneOf11InsufficientStake
import org.openapitools.client.models.ActionErrorKindOneOf12
import org.openapitools.client.models.ActionErrorKindOneOf13
import org.openapitools.client.models.ActionErrorKindOneOf14
import org.openapitools.client.models.ActionErrorKindOneOf15
import org.openapitools.client.models.ActionErrorKindOneOf16
import org.openapitools.client.models.ActionErrorKindOneOf16DelegateActionSenderDoesNotMatchTxReceiver
import org.openapitools.client.models.ActionErrorKindOneOf17
import org.openapitools.client.models.ActionErrorKindOneOf18
import org.openapitools.client.models.ActionErrorKindOneOf18DelegateActionInvalidNonce
import org.openapitools.client.models.ActionErrorKindOneOf19
import org.openapitools.client.models.ActionErrorKindOneOf19DelegateActionNonceTooLarge
import org.openapitools.client.models.ActionErrorKindOneOf2
import org.openapitools.client.models.ActionErrorKindOneOf20
import org.openapitools.client.models.ActionErrorKindOneOf20GlobalContractDoesNotExist
import org.openapitools.client.models.ActionErrorKindOneOf2CreateAccountOnlyByRegistrar
import org.openapitools.client.models.ActionErrorKindOneOf3
import org.openapitools.client.models.ActionErrorKindOneOf3CreateAccountNotAllowed
import org.openapitools.client.models.ActionErrorKindOneOf4
import org.openapitools.client.models.ActionErrorKindOneOf4ActorNoPermission
import org.openapitools.client.models.ActionErrorKindOneOf5
import org.openapitools.client.models.ActionErrorKindOneOf5DeleteKeyDoesNotExist
import org.openapitools.client.models.ActionErrorKindOneOf6
import org.openapitools.client.models.ActionErrorKindOneOf7
import org.openapitools.client.models.ActionErrorKindOneOf8
import org.openapitools.client.models.ActionErrorKindOneOf8LackBalanceForState
import org.openapitools.client.models.ActionErrorKindOneOf9
import org.openapitools.client.models.ActionErrorKindOneOfAccountAlreadyExists
import org.openapitools.client.models.FunctionCallError
import org.openapitools.client.models.InvalidAccessKeyError
import org.openapitools.client.models.ReceiptValidationError

class ActionErrorKindTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ActionErrorKind
        //val modelInstance = ActionErrorKind()

        // to test the property `accountAlreadyExists`
        should("test accountAlreadyExists") {
            // uncomment below to test the property
            //modelInstance.accountAlreadyExists shouldBe ("TODO")
        }

        // to test the property `accountDoesNotExist`
        should("test accountDoesNotExist") {
            // uncomment below to test the property
            //modelInstance.accountDoesNotExist shouldBe ("TODO")
        }

        // to test the property `createAccountOnlyByRegistrar`
        should("test createAccountOnlyByRegistrar") {
            // uncomment below to test the property
            //modelInstance.createAccountOnlyByRegistrar shouldBe ("TODO")
        }

        // to test the property `createAccountNotAllowed`
        should("test createAccountNotAllowed") {
            // uncomment below to test the property
            //modelInstance.createAccountNotAllowed shouldBe ("TODO")
        }

        // to test the property `actorNoPermission`
        should("test actorNoPermission") {
            // uncomment below to test the property
            //modelInstance.actorNoPermission shouldBe ("TODO")
        }

        // to test the property `deleteKeyDoesNotExist`
        should("test deleteKeyDoesNotExist") {
            // uncomment below to test the property
            //modelInstance.deleteKeyDoesNotExist shouldBe ("TODO")
        }

        // to test the property `addKeyAlreadyExists`
        should("test addKeyAlreadyExists") {
            // uncomment below to test the property
            //modelInstance.addKeyAlreadyExists shouldBe ("TODO")
        }

        // to test the property `deleteAccountStaking`
        should("test deleteAccountStaking") {
            // uncomment below to test the property
            //modelInstance.deleteAccountStaking shouldBe ("TODO")
        }

        // to test the property `lackBalanceForState`
        should("test lackBalanceForState") {
            // uncomment below to test the property
            //modelInstance.lackBalanceForState shouldBe ("TODO")
        }

        // to test the property `triesToUnstake`
        should("test triesToUnstake") {
            // uncomment below to test the property
            //modelInstance.triesToUnstake shouldBe ("TODO")
        }

        // to test the property `triesToStake`
        should("test triesToStake") {
            // uncomment below to test the property
            //modelInstance.triesToStake shouldBe ("TODO")
        }

        // to test the property `insufficientStake`
        should("test insufficientStake") {
            // uncomment below to test the property
            //modelInstance.insufficientStake shouldBe ("TODO")
        }

        // to test the property `functionCallError`
        should("test functionCallError") {
            // uncomment below to test the property
            //modelInstance.functionCallError shouldBe ("TODO")
        }

        // to test the property `newReceiptValidationError`
        should("test newReceiptValidationError") {
            // uncomment below to test the property
            //modelInstance.newReceiptValidationError shouldBe ("TODO")
        }

        // to test the property `onlyImplicitAccountCreationAllowed`
        should("test onlyImplicitAccountCreationAllowed") {
            // uncomment below to test the property
            //modelInstance.onlyImplicitAccountCreationAllowed shouldBe ("TODO")
        }

        // to test the property `deleteAccountWithLargeState`
        should("test deleteAccountWithLargeState") {
            // uncomment below to test the property
            //modelInstance.deleteAccountWithLargeState shouldBe ("TODO")
        }

        // to test the property `delegateActionSenderDoesNotMatchTxReceiver`
        should("test delegateActionSenderDoesNotMatchTxReceiver") {
            // uncomment below to test the property
            //modelInstance.delegateActionSenderDoesNotMatchTxReceiver shouldBe ("TODO")
        }

        // to test the property `delegateActionAccessKeyError`
        should("test delegateActionAccessKeyError") {
            // uncomment below to test the property
            //modelInstance.delegateActionAccessKeyError shouldBe ("TODO")
        }

        // to test the property `delegateActionInvalidNonce`
        should("test delegateActionInvalidNonce") {
            // uncomment below to test the property
            //modelInstance.delegateActionInvalidNonce shouldBe ("TODO")
        }

        // to test the property `delegateActionNonceTooLarge`
        should("test delegateActionNonceTooLarge") {
            // uncomment below to test the property
            //modelInstance.delegateActionNonceTooLarge shouldBe ("TODO")
        }

        // to test the property `globalContractDoesNotExist`
        should("test globalContractDoesNotExist") {
            // uncomment below to test the property
            //modelInstance.globalContractDoesNotExist shouldBe ("TODO")
        }

    }
}
