/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.RpcStatusResponse
import org.openapitools.client.models.DetailedDebugStatus
import org.openapitools.client.models.StatusSyncInfo
import org.openapitools.client.models.ValidatorInfo
import org.openapitools.client.models.Version

class RpcStatusResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of RpcStatusResponse
        //val modelInstance = RpcStatusResponse()

        // to test the property `chainId` - Unique chain id.
        should("test chainId") {
            // uncomment below to test the property
            //modelInstance.chainId shouldBe ("TODO")
        }

        // to test the property `genesisHash` - Genesis hash of the chain.
        should("test genesisHash") {
            // uncomment below to test the property
            //modelInstance.genesisHash shouldBe ("TODO")
        }

        // to test the property `latestProtocolVersion` - Latest protocol version that this client supports.
        should("test latestProtocolVersion") {
            // uncomment below to test the property
            //modelInstance.latestProtocolVersion shouldBe ("TODO")
        }

        // to test the property `nodePublicKey` - Public key of the node.
        should("test nodePublicKey") {
            // uncomment below to test the property
            //modelInstance.nodePublicKey shouldBe ("TODO")
        }

        // to test the property `protocolVersion` - Currently active protocol version.
        should("test protocolVersion") {
            // uncomment below to test the property
            //modelInstance.protocolVersion shouldBe ("TODO")
        }

        // to test the property `syncInfo` - Sync status of the node.
        should("test syncInfo") {
            // uncomment below to test the property
            //modelInstance.syncInfo shouldBe ("TODO")
        }

        // to test the property `uptimeSec` - Uptime of the node.
        should("test uptimeSec") {
            // uncomment below to test the property
            //modelInstance.uptimeSec shouldBe ("TODO")
        }

        // to test the property `validators` - Current epoch validators.
        should("test validators") {
            // uncomment below to test the property
            //modelInstance.validators shouldBe ("TODO")
        }

        // to test the property `version` - Binary version.
        should("test version") {
            // uncomment below to test the property
            //modelInstance.version shouldBe ("TODO")
        }

        // to test the property `detailedDebugStatus`
        should("test detailedDebugStatus") {
            // uncomment below to test the property
            //modelInstance.detailedDebugStatus shouldBe ("TODO")
        }

        // to test the property `nodeKey`
        should("test nodeKey") {
            // uncomment below to test the property
            //modelInstance.nodeKey shouldBe ("TODO")
        }

        // to test the property `rpcAddr` - Address for RPC server.  None if node doesn't have RPC endpoint enabled.
        should("test rpcAddr") {
            // uncomment below to test the property
            //modelInstance.rpcAddr shouldBe ("TODO")
        }

        // to test the property `validatorAccountId` - NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
        should("test validatorAccountId") {
            // uncomment below to test the property
            //modelInstance.validatorAccountId shouldBe ("TODO")
        }

        // to test the property `validatorPublicKey`
        should("test validatorPublicKey") {
            // uncomment below to test the property
            //modelInstance.validatorPublicKey shouldBe ("TODO")
        }

    }
}
