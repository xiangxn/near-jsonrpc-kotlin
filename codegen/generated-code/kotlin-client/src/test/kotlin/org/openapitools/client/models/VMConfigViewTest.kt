/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.VMConfigView
import org.openapitools.client.models.ExtCostsConfigView
import org.openapitools.client.models.LimitConfig
import org.openapitools.client.models.StorageGetMode
import org.openapitools.client.models.VMKind

class VMConfigViewTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of VMConfigView
        //val modelInstance = VMConfigView()

        // to test the property `deterministicAccountIds` - See [VMConfig::deterministic_account_ids](crate::vm::Config::deterministic_account_ids).
        should("test deterministicAccountIds") {
            // uncomment below to test the property
            //modelInstance.deterministicAccountIds shouldBe ("TODO")
        }

        // to test the property `discardCustomSections` - See [VMConfig::discard_custom_sections](crate::vm::Config::discard_custom_sections).
        should("test discardCustomSections") {
            // uncomment below to test the property
            //modelInstance.discardCustomSections shouldBe ("TODO")
        }

        // to test the property `ethImplicitAccounts` - See [VMConfig::eth_implicit_accounts](crate::vm::Config::eth_implicit_accounts).
        should("test ethImplicitAccounts") {
            // uncomment below to test the property
            //modelInstance.ethImplicitAccounts shouldBe ("TODO")
        }

        // to test the property `extCosts` - Costs for runtime externals
        should("test extCosts") {
            // uncomment below to test the property
            //modelInstance.extCosts shouldBe ("TODO")
        }

        // to test the property `fixContractLoadingCost` - See [VMConfig::fix_contract_loading_cost](crate::vm::Config::fix_contract_loading_cost).
        should("test fixContractLoadingCost") {
            // uncomment below to test the property
            //modelInstance.fixContractLoadingCost shouldBe ("TODO")
        }

        // to test the property `globalContractHostFns` - See [VMConfig::global_contract_host_fns](crate::vm::Config::global_contract_host_fns).
        should("test globalContractHostFns") {
            // uncomment below to test the property
            //modelInstance.globalContractHostFns shouldBe ("TODO")
        }

        // to test the property `growMemCost` - Gas cost of a growing memory by single page.
        should("test growMemCost") {
            // uncomment below to test the property
            //modelInstance.growMemCost shouldBe ("TODO")
        }

        // to test the property `implicitAccountCreation` - See [VMConfig::implicit_account_creation](crate::vm::Config::implicit_account_creation).
        should("test implicitAccountCreation") {
            // uncomment below to test the property
            //modelInstance.implicitAccountCreation shouldBe ("TODO")
        }

        // to test the property `limitConfig` - Describes limits for VM and Runtime.  TODO: Consider changing this to `VMLimitConfigView` to avoid dependency on runtime.
        should("test limitConfig") {
            // uncomment below to test the property
            //modelInstance.limitConfig shouldBe ("TODO")
        }

        // to test the property `reftypesBulkMemory` - See [VMConfig::reftypes_bulk_memory](crate::vm::Config::reftypes_bulk_memory).
        should("test reftypesBulkMemory") {
            // uncomment below to test the property
            //modelInstance.reftypesBulkMemory shouldBe ("TODO")
        }

        // to test the property `regularOpCost` - Gas cost of a regular operation.
        should("test regularOpCost") {
            // uncomment below to test the property
            //modelInstance.regularOpCost shouldBe ("TODO")
        }

        // to test the property `saturatingFloatToInt` - See [VMConfig::saturating_float_to_int](crate::vm::Config::saturating_float_to_int).
        should("test saturatingFloatToInt") {
            // uncomment below to test the property
            //modelInstance.saturatingFloatToInt shouldBe ("TODO")
        }

        // to test the property `storageGetMode` - See [VMConfig::storage_get_mode](crate::vm::Config::storage_get_mode).
        should("test storageGetMode") {
            // uncomment below to test the property
            //modelInstance.storageGetMode shouldBe ("TODO")
        }

        // to test the property `vmKind` - See [VMConfig::vm_kind](crate::vm::Config::vm_kind).
        should("test vmKind") {
            // uncomment below to test the property
            //modelInstance.vmKind shouldBe ("TODO")
        }

    }
}
