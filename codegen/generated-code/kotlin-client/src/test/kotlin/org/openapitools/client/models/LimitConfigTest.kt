/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.LimitConfig

class LimitConfigTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of LimitConfig
        //val modelInstance = LimitConfig()

        // to test the property `initialMemoryPages` - The initial number of memory pages. NOTE: It's not a limiter itself, but it's a value we use for initial_memory_pages.
        should("test initialMemoryPages") {
            // uncomment below to test the property
            //modelInstance.initialMemoryPages shouldBe ("TODO")
        }

        // to test the property `maxActionsPerReceipt` - Max number of actions per receipt.
        should("test maxActionsPerReceipt") {
            // uncomment below to test the property
            //modelInstance.maxActionsPerReceipt shouldBe ("TODO")
        }

        // to test the property `maxArgumentsLength` - Max length of arguments in a function call action.
        should("test maxArgumentsLength") {
            // uncomment below to test the property
            //modelInstance.maxArgumentsLength shouldBe ("TODO")
        }

        // to test the property `maxContractSize` - Max contract size
        should("test maxContractSize") {
            // uncomment below to test the property
            //modelInstance.maxContractSize shouldBe ("TODO")
        }

        // to test the property `maxGasBurnt` - Max amount of gas that can be used, excluding gas attached to promises.
        should("test maxGasBurnt") {
            // uncomment below to test the property
            //modelInstance.maxGasBurnt shouldBe ("TODO")
        }

        // to test the property `maxLengthMethodName` - Max length of any method name (without terminating character).
        should("test maxLengthMethodName") {
            // uncomment below to test the property
            //modelInstance.maxLengthMethodName shouldBe ("TODO")
        }

        // to test the property `maxLengthReturnedData` - Max length of returned data
        should("test maxLengthReturnedData") {
            // uncomment below to test the property
            //modelInstance.maxLengthReturnedData shouldBe ("TODO")
        }

        // to test the property `maxLengthStorageKey` - Max storage key size
        should("test maxLengthStorageKey") {
            // uncomment below to test the property
            //modelInstance.maxLengthStorageKey shouldBe ("TODO")
        }

        // to test the property `maxLengthStorageValue` - Max storage value size
        should("test maxLengthStorageValue") {
            // uncomment below to test the property
            //modelInstance.maxLengthStorageValue shouldBe ("TODO")
        }

        // to test the property `maxMemoryPages` - What is the maximal memory pages amount is allowed to have for a contract.
        should("test maxMemoryPages") {
            // uncomment below to test the property
            //modelInstance.maxMemoryPages shouldBe ("TODO")
        }

        // to test the property `maxNumberBytesMethodNames` - Max total length of all method names (including terminating character) for a function call permission access key.
        should("test maxNumberBytesMethodNames") {
            // uncomment below to test the property
            //modelInstance.maxNumberBytesMethodNames shouldBe ("TODO")
        }

        // to test the property `maxNumberInputDataDependencies` - Max number of input data dependencies
        should("test maxNumberInputDataDependencies") {
            // uncomment below to test the property
            //modelInstance.maxNumberInputDataDependencies shouldBe ("TODO")
        }

        // to test the property `maxNumberLogs` - Maximum number of log entries.
        should("test maxNumberLogs") {
            // uncomment below to test the property
            //modelInstance.maxNumberLogs shouldBe ("TODO")
        }

        // to test the property `maxNumberRegisters` - Maximum number of registers that can be used simultaneously.  Note that due to an implementation quirk [read: a bug] in VMLogic, if we have this number of registers, no subsequent writes to the registers will succeed even if they replace an existing register.
        should("test maxNumberRegisters") {
            // uncomment below to test the property
            //modelInstance.maxNumberRegisters shouldBe ("TODO")
        }

        // to test the property `maxPromisesPerFunctionCallAction` - Max number of promises that a function call can create
        should("test maxPromisesPerFunctionCallAction") {
            // uncomment below to test the property
            //modelInstance.maxPromisesPerFunctionCallAction shouldBe ("TODO")
        }

        // to test the property `maxReceiptSize` - Max receipt size
        should("test maxReceiptSize") {
            // uncomment below to test the property
            //modelInstance.maxReceiptSize shouldBe ("TODO")
        }

        // to test the property `maxRegisterSize` - Maximum number of bytes that can be stored in a single register.
        should("test maxRegisterSize") {
            // uncomment below to test the property
            //modelInstance.maxRegisterSize shouldBe ("TODO")
        }

        // to test the property `maxStackHeight` - How tall the stack is allowed to grow?  See <https://wiki.parity.io/WebAssembly-StackHeight> to find out how the stack frame cost is calculated.
        should("test maxStackHeight") {
            // uncomment below to test the property
            //modelInstance.maxStackHeight shouldBe ("TODO")
        }

        // to test the property `maxTotalLogLength` - Maximum total length in bytes of all log messages.
        should("test maxTotalLogLength") {
            // uncomment below to test the property
            //modelInstance.maxTotalLogLength shouldBe ("TODO")
        }

        // to test the property `maxTotalPrepaidGas` - Max total prepaid gas for all function call actions per receipt.
        should("test maxTotalPrepaidGas") {
            // uncomment below to test the property
            //modelInstance.maxTotalPrepaidGas shouldBe ("TODO")
        }

        // to test the property `maxTransactionSize` - Max transaction size
        should("test maxTransactionSize") {
            // uncomment below to test the property
            //modelInstance.maxTransactionSize shouldBe ("TODO")
        }

        // to test the property `maxYieldPayloadSize` - Maximum number of bytes for payload passed over a yield resume.
        should("test maxYieldPayloadSize") {
            // uncomment below to test the property
            //modelInstance.maxYieldPayloadSize shouldBe ("TODO")
        }

        // to test the property `perReceiptStorageProofSizeLimit` - Hard limit on the size of storage proof generated while executing a single receipt.
        should("test perReceiptStorageProofSizeLimit") {
            // uncomment below to test the property
            //modelInstance.perReceiptStorageProofSizeLimit shouldBe ("TODO")
        }

        // to test the property `registersMemoryLimit` - Limit of memory used by registers.
        should("test registersMemoryLimit") {
            // uncomment below to test the property
            //modelInstance.registersMemoryLimit shouldBe ("TODO")
        }

        // to test the property `yieldTimeoutLengthInBlocks` - Number of blocks after which a yielded promise times out.
        should("test yieldTimeoutLengthInBlocks") {
            // uncomment below to test the property
            //modelInstance.yieldTimeoutLengthInBlocks shouldBe ("TODO")
        }

        // to test the property `accountIdValidityRulesVersion` - Whether to enforce account_id well-formed-ness where it wasn't enforced historically.
        should("test accountIdValidityRulesVersion") {
            // uncomment below to test the property
            //modelInstance.accountIdValidityRulesVersion shouldBe ("TODO")
        }

        // to test the property `maxElementsPerContractTable` - If present, stores max number of elements in a single contract's table
        should("test maxElementsPerContractTable") {
            // uncomment below to test the property
            //modelInstance.maxElementsPerContractTable shouldBe ("TODO")
        }

        // to test the property `maxFunctionsNumberPerContract` - If present, stores max number of functions in one contract
        should("test maxFunctionsNumberPerContract") {
            // uncomment below to test the property
            //modelInstance.maxFunctionsNumberPerContract shouldBe ("TODO")
        }

        // to test the property `maxLocalsPerContract` - If present, stores max number of locals declared globally in one contract
        should("test maxLocalsPerContract") {
            // uncomment below to test the property
            //modelInstance.maxLocalsPerContract shouldBe ("TODO")
        }

        // to test the property `maxTablesPerContract` - If present, stores max number of tables declared globally in one contract
        should("test maxTablesPerContract") {
            // uncomment below to test the property
            //modelInstance.maxTablesPerContract shouldBe ("TODO")
        }

    }
}
