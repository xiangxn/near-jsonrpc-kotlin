/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.DefaultApi
import org.openapitools.client.models.JsonRpcRequestForBlock
import org.openapitools.client.models.JsonRpcRequestForBlockEffects
import org.openapitools.client.models.JsonRpcRequestForBroadcastTxAsync
import org.openapitools.client.models.JsonRpcRequestForBroadcastTxCommit
import org.openapitools.client.models.JsonRpcRequestForChanges
import org.openapitools.client.models.JsonRpcRequestForChunk
import org.openapitools.client.models.JsonRpcRequestForClientConfig
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALChanges
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALChangesInBlock
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALCongestionLevel
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALGenesisConfig
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALLightClientBlockProof
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALLightClientProof
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALMaintenanceWindows
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALProtocolConfig
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALReceipt
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALSplitStorageInfo
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALTxStatus
import org.openapitools.client.models.JsonRpcRequestForEXPERIMENTALValidatorsOrdered
import org.openapitools.client.models.JsonRpcRequestForGasPrice
import org.openapitools.client.models.JsonRpcRequestForGenesisConfig
import org.openapitools.client.models.JsonRpcRequestForHealth
import org.openapitools.client.models.JsonRpcRequestForLightClientProof
import org.openapitools.client.models.JsonRpcRequestForMaintenanceWindows
import org.openapitools.client.models.JsonRpcRequestForNetworkInfo
import org.openapitools.client.models.JsonRpcRequestForNextLightClientBlock
import org.openapitools.client.models.JsonRpcRequestForQuery
import org.openapitools.client.models.JsonRpcRequestForSendTx
import org.openapitools.client.models.JsonRpcRequestForStatus
import org.openapitools.client.models.JsonRpcRequestForTx
import org.openapitools.client.models.JsonRpcRequestForValidators
import org.openapitools.client.models.JsonRpcResponseForArrayOfRangeOfUint64AndRpcError
import org.openapitools.client.models.JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError
import org.openapitools.client.models.JsonRpcResponseForCryptoHashAndRpcError
import org.openapitools.client.models.JsonRpcResponseForGenesisConfigAndRpcError
import org.openapitools.client.models.JsonRpcResponseForNullableRpcHealthResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcBlockResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcChunkResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcClientConfigResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcCongestionLevelResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcGasPriceResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcNetworkInfoResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcProtocolConfigResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcQueryResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcReceiptResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcStatusResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcTransactionResponseAndRpcError
import org.openapitools.client.models.JsonRpcResponseForRpcValidatorResponseAndRpcError

class DefaultApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DefaultApi
        //val apiInstance = DefaultApi()

        // to test block
        should("test block") {
            // uncomment below to test block
            //val jsonRpcRequestForBlock : JsonRpcRequestForBlock =  // JsonRpcRequestForBlock | 
            //val result : JsonRpcResponseForRpcBlockResponseAndRpcError = apiInstance.block(jsonRpcRequestForBlock)
            //result shouldBe ("TODO")
        }

        // to test blockEffects
        should("test blockEffects") {
            // uncomment below to test blockEffects
            //val jsonRpcRequestForBlockEffects : JsonRpcRequestForBlockEffects =  // JsonRpcRequestForBlockEffects | 
            //val result : JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError = apiInstance.blockEffects(jsonRpcRequestForBlockEffects)
            //result shouldBe ("TODO")
        }

        // to test broadcastTxAsync
        should("test broadcastTxAsync") {
            // uncomment below to test broadcastTxAsync
            //val jsonRpcRequestForBroadcastTxAsync : JsonRpcRequestForBroadcastTxAsync =  // JsonRpcRequestForBroadcastTxAsync | 
            //val result : JsonRpcResponseForCryptoHashAndRpcError = apiInstance.broadcastTxAsync(jsonRpcRequestForBroadcastTxAsync)
            //result shouldBe ("TODO")
        }

        // to test broadcastTxCommit
        should("test broadcastTxCommit") {
            // uncomment below to test broadcastTxCommit
            //val jsonRpcRequestForBroadcastTxCommit : JsonRpcRequestForBroadcastTxCommit =  // JsonRpcRequestForBroadcastTxCommit | 
            //val result : JsonRpcResponseForRpcTransactionResponseAndRpcError = apiInstance.broadcastTxCommit(jsonRpcRequestForBroadcastTxCommit)
            //result shouldBe ("TODO")
        }

        // to test changes
        should("test changes") {
            // uncomment below to test changes
            //val jsonRpcRequestForChanges : JsonRpcRequestForChanges =  // JsonRpcRequestForChanges | 
            //val result : JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError = apiInstance.changes(jsonRpcRequestForChanges)
            //result shouldBe ("TODO")
        }

        // to test chunk
        should("test chunk") {
            // uncomment below to test chunk
            //val jsonRpcRequestForChunk : JsonRpcRequestForChunk =  // JsonRpcRequestForChunk | 
            //val result : JsonRpcResponseForRpcChunkResponseAndRpcError = apiInstance.chunk(jsonRpcRequestForChunk)
            //result shouldBe ("TODO")
        }

        // to test clientConfig
        should("test clientConfig") {
            // uncomment below to test clientConfig
            //val jsonRpcRequestForClientConfig : JsonRpcRequestForClientConfig =  // JsonRpcRequestForClientConfig | 
            //val result : JsonRpcResponseForRpcClientConfigResponseAndRpcError = apiInstance.clientConfig(jsonRpcRequestForClientConfig)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALChanges
        should("test eXPERIMENTALChanges") {
            // uncomment below to test eXPERIMENTALChanges
            //val jsonRpcRequestForEXPERIMENTALChanges : JsonRpcRequestForEXPERIMENTALChanges =  // JsonRpcRequestForEXPERIMENTALChanges | 
            //val result : JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError = apiInstance.eXPERIMENTALChanges(jsonRpcRequestForEXPERIMENTALChanges)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALChangesInBlock
        should("test eXPERIMENTALChangesInBlock") {
            // uncomment below to test eXPERIMENTALChangesInBlock
            //val jsonRpcRequestForEXPERIMENTALChangesInBlock : JsonRpcRequestForEXPERIMENTALChangesInBlock =  // JsonRpcRequestForEXPERIMENTALChangesInBlock | 
            //val result : JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError = apiInstance.eXPERIMENTALChangesInBlock(jsonRpcRequestForEXPERIMENTALChangesInBlock)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALCongestionLevel
        should("test eXPERIMENTALCongestionLevel") {
            // uncomment below to test eXPERIMENTALCongestionLevel
            //val jsonRpcRequestForEXPERIMENTALCongestionLevel : JsonRpcRequestForEXPERIMENTALCongestionLevel =  // JsonRpcRequestForEXPERIMENTALCongestionLevel | 
            //val result : JsonRpcResponseForRpcCongestionLevelResponseAndRpcError = apiInstance.eXPERIMENTALCongestionLevel(jsonRpcRequestForEXPERIMENTALCongestionLevel)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALGenesisConfig
        should("test eXPERIMENTALGenesisConfig") {
            // uncomment below to test eXPERIMENTALGenesisConfig
            //val jsonRpcRequestForEXPERIMENTALGenesisConfig : JsonRpcRequestForEXPERIMENTALGenesisConfig =  // JsonRpcRequestForEXPERIMENTALGenesisConfig | 
            //val result : JsonRpcResponseForGenesisConfigAndRpcError = apiInstance.eXPERIMENTALGenesisConfig(jsonRpcRequestForEXPERIMENTALGenesisConfig)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALLightClientBlockProof
        should("test eXPERIMENTALLightClientBlockProof") {
            // uncomment below to test eXPERIMENTALLightClientBlockProof
            //val jsonRpcRequestForEXPERIMENTALLightClientBlockProof : JsonRpcRequestForEXPERIMENTALLightClientBlockProof =  // JsonRpcRequestForEXPERIMENTALLightClientBlockProof | 
            //val result : JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError = apiInstance.eXPERIMENTALLightClientBlockProof(jsonRpcRequestForEXPERIMENTALLightClientBlockProof)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALLightClientProof
        should("test eXPERIMENTALLightClientProof") {
            // uncomment below to test eXPERIMENTALLightClientProof
            //val jsonRpcRequestForEXPERIMENTALLightClientProof : JsonRpcRequestForEXPERIMENTALLightClientProof =  // JsonRpcRequestForEXPERIMENTALLightClientProof | 
            //val result : JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError = apiInstance.eXPERIMENTALLightClientProof(jsonRpcRequestForEXPERIMENTALLightClientProof)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALMaintenanceWindows
        should("test eXPERIMENTALMaintenanceWindows") {
            // uncomment below to test eXPERIMENTALMaintenanceWindows
            //val jsonRpcRequestForEXPERIMENTALMaintenanceWindows : JsonRpcRequestForEXPERIMENTALMaintenanceWindows =  // JsonRpcRequestForEXPERIMENTALMaintenanceWindows | 
            //val result : JsonRpcResponseForArrayOfRangeOfUint64AndRpcError = apiInstance.eXPERIMENTALMaintenanceWindows(jsonRpcRequestForEXPERIMENTALMaintenanceWindows)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALProtocolConfig
        should("test eXPERIMENTALProtocolConfig") {
            // uncomment below to test eXPERIMENTALProtocolConfig
            //val jsonRpcRequestForEXPERIMENTALProtocolConfig : JsonRpcRequestForEXPERIMENTALProtocolConfig =  // JsonRpcRequestForEXPERIMENTALProtocolConfig | 
            //val result : JsonRpcResponseForRpcProtocolConfigResponseAndRpcError = apiInstance.eXPERIMENTALProtocolConfig(jsonRpcRequestForEXPERIMENTALProtocolConfig)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALReceipt
        should("test eXPERIMENTALReceipt") {
            // uncomment below to test eXPERIMENTALReceipt
            //val jsonRpcRequestForEXPERIMENTALReceipt : JsonRpcRequestForEXPERIMENTALReceipt =  // JsonRpcRequestForEXPERIMENTALReceipt | 
            //val result : JsonRpcResponseForRpcReceiptResponseAndRpcError = apiInstance.eXPERIMENTALReceipt(jsonRpcRequestForEXPERIMENTALReceipt)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALSplitStorageInfo
        should("test eXPERIMENTALSplitStorageInfo") {
            // uncomment below to test eXPERIMENTALSplitStorageInfo
            //val jsonRpcRequestForEXPERIMENTALSplitStorageInfo : JsonRpcRequestForEXPERIMENTALSplitStorageInfo =  // JsonRpcRequestForEXPERIMENTALSplitStorageInfo | 
            //val result : JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError = apiInstance.eXPERIMENTALSplitStorageInfo(jsonRpcRequestForEXPERIMENTALSplitStorageInfo)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALTxStatus
        should("test eXPERIMENTALTxStatus") {
            // uncomment below to test eXPERIMENTALTxStatus
            //val jsonRpcRequestForEXPERIMENTALTxStatus : JsonRpcRequestForEXPERIMENTALTxStatus =  // JsonRpcRequestForEXPERIMENTALTxStatus | 
            //val result : JsonRpcResponseForRpcTransactionResponseAndRpcError = apiInstance.eXPERIMENTALTxStatus(jsonRpcRequestForEXPERIMENTALTxStatus)
            //result shouldBe ("TODO")
        }

        // to test eXPERIMENTALValidatorsOrdered
        should("test eXPERIMENTALValidatorsOrdered") {
            // uncomment below to test eXPERIMENTALValidatorsOrdered
            //val jsonRpcRequestForEXPERIMENTALValidatorsOrdered : JsonRpcRequestForEXPERIMENTALValidatorsOrdered =  // JsonRpcRequestForEXPERIMENTALValidatorsOrdered | 
            //val result : JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError = apiInstance.eXPERIMENTALValidatorsOrdered(jsonRpcRequestForEXPERIMENTALValidatorsOrdered)
            //result shouldBe ("TODO")
        }

        // to test gasPrice
        should("test gasPrice") {
            // uncomment below to test gasPrice
            //val jsonRpcRequestForGasPrice : JsonRpcRequestForGasPrice =  // JsonRpcRequestForGasPrice | 
            //val result : JsonRpcResponseForRpcGasPriceResponseAndRpcError = apiInstance.gasPrice(jsonRpcRequestForGasPrice)
            //result shouldBe ("TODO")
        }

        // to test genesisConfig
        should("test genesisConfig") {
            // uncomment below to test genesisConfig
            //val jsonRpcRequestForGenesisConfig : JsonRpcRequestForGenesisConfig =  // JsonRpcRequestForGenesisConfig | 
            //val result : JsonRpcResponseForGenesisConfigAndRpcError = apiInstance.genesisConfig(jsonRpcRequestForGenesisConfig)
            //result shouldBe ("TODO")
        }

        // to test health
        should("test health") {
            // uncomment below to test health
            //val jsonRpcRequestForHealth : JsonRpcRequestForHealth =  // JsonRpcRequestForHealth | 
            //val result : JsonRpcResponseForNullableRpcHealthResponseAndRpcError = apiInstance.health(jsonRpcRequestForHealth)
            //result shouldBe ("TODO")
        }

        // to test lightClientProof
        should("test lightClientProof") {
            // uncomment below to test lightClientProof
            //val jsonRpcRequestForLightClientProof : JsonRpcRequestForLightClientProof =  // JsonRpcRequestForLightClientProof | 
            //val result : JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError = apiInstance.lightClientProof(jsonRpcRequestForLightClientProof)
            //result shouldBe ("TODO")
        }

        // to test maintenanceWindows
        should("test maintenanceWindows") {
            // uncomment below to test maintenanceWindows
            //val jsonRpcRequestForMaintenanceWindows : JsonRpcRequestForMaintenanceWindows =  // JsonRpcRequestForMaintenanceWindows | 
            //val result : JsonRpcResponseForArrayOfRangeOfUint64AndRpcError = apiInstance.maintenanceWindows(jsonRpcRequestForMaintenanceWindows)
            //result shouldBe ("TODO")
        }

        // to test networkInfo
        should("test networkInfo") {
            // uncomment below to test networkInfo
            //val jsonRpcRequestForNetworkInfo : JsonRpcRequestForNetworkInfo =  // JsonRpcRequestForNetworkInfo | 
            //val result : JsonRpcResponseForRpcNetworkInfoResponseAndRpcError = apiInstance.networkInfo(jsonRpcRequestForNetworkInfo)
            //result shouldBe ("TODO")
        }

        // to test nextLightClientBlock
        should("test nextLightClientBlock") {
            // uncomment below to test nextLightClientBlock
            //val jsonRpcRequestForNextLightClientBlock : JsonRpcRequestForNextLightClientBlock =  // JsonRpcRequestForNextLightClientBlock | 
            //val result : JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError = apiInstance.nextLightClientBlock(jsonRpcRequestForNextLightClientBlock)
            //result shouldBe ("TODO")
        }

        // to test query
        should("test query") {
            // uncomment below to test query
            //val jsonRpcRequestForQuery : JsonRpcRequestForQuery =  // JsonRpcRequestForQuery | 
            //val result : JsonRpcResponseForRpcQueryResponseAndRpcError = apiInstance.query(jsonRpcRequestForQuery)
            //result shouldBe ("TODO")
        }

        // to test sendTx
        should("test sendTx") {
            // uncomment below to test sendTx
            //val jsonRpcRequestForSendTx : JsonRpcRequestForSendTx =  // JsonRpcRequestForSendTx | 
            //val result : JsonRpcResponseForRpcTransactionResponseAndRpcError = apiInstance.sendTx(jsonRpcRequestForSendTx)
            //result shouldBe ("TODO")
        }

        // to test status
        should("test status") {
            // uncomment below to test status
            //val jsonRpcRequestForStatus : JsonRpcRequestForStatus =  // JsonRpcRequestForStatus | 
            //val result : JsonRpcResponseForRpcStatusResponseAndRpcError = apiInstance.status(jsonRpcRequestForStatus)
            //result shouldBe ("TODO")
        }

        // to test tx
        should("test tx") {
            // uncomment below to test tx
            //val jsonRpcRequestForTx : JsonRpcRequestForTx =  // JsonRpcRequestForTx | 
            //val result : JsonRpcResponseForRpcTransactionResponseAndRpcError = apiInstance.tx(jsonRpcRequestForTx)
            //result shouldBe ("TODO")
        }

        // to test validators
        should("test validators") {
            // uncomment below to test validators
            //val jsonRpcRequestForValidators : JsonRpcRequestForValidators =  // JsonRpcRequestForValidators | 
            //val result : JsonRpcResponseForRpcValidatorResponseAndRpcError = apiInstance.validators(jsonRpcRequestForValidators)
            //result shouldBe ("TODO")
        }

    }
}
