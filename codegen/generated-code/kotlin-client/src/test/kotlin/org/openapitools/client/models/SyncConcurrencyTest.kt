/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.SyncConcurrency

class SyncConcurrencyTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SyncConcurrency
        //val modelInstance = SyncConcurrency()

        // to test the property `apply` - Maximum number of \"apply parts\" tasks that can be performed in parallel. This is a very disk-heavy task and therefore we set this to a low limit, or else the rocksdb contention makes the whole server freeze up.
        should("test apply") {
            // uncomment below to test the property
            //modelInstance.apply shouldBe ("TODO")
        }

        // to test the property `applyDuringCatchup` - Maximum number of \"apply parts\" tasks that can be performed in parallel during catchup. We set this to a very low value to avoid overloading the node while it is still performing normal tasks.
        should("test applyDuringCatchup") {
            // uncomment below to test the property
            //modelInstance.applyDuringCatchup shouldBe ("TODO")
        }

        // to test the property `peerDownloads` - Maximum number of outstanding requests for decentralized state sync.
        should("test peerDownloads") {
            // uncomment below to test the property
            //modelInstance.peerDownloads shouldBe ("TODO")
        }

        // to test the property `perShard` - The maximum parallelism to use per shard. This is mostly for fairness, because the actual rate limiting is done by the TaskTrackers, but this is useful for balancing the shards a little.
        should("test perShard") {
            // uncomment below to test the property
            //modelInstance.perShard shouldBe ("TODO")
        }

    }
}
