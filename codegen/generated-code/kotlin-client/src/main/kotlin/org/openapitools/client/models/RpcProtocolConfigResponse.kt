/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.RuntimeConfigView
import org.openapitools.client.models.ShardLayout

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param avgHiddenValidatorSeatsPerShard Expected number of hidden validators per shard.
 * @param blockProducerKickoutThreshold Threshold for kicking out block producers, between 0 and 100.
 * @param chainId ID of the blockchain. This must be unique for every blockchain. If your testnet blockchains do not have unique chain IDs, you will have a bad time.
 * @param chunkProducerKickoutThreshold Threshold for kicking out chunk producers, between 0 and 100.
 * @param chunkValidatorOnlyKickoutThreshold Threshold for kicking out nodes which are only chunk validators, between 0 and 100.
 * @param dynamicResharding Enable dynamic re-sharding.
 * @param epochLength Epoch length counted in block heights.
 * @param fishermenThreshold Fishermen stake threshold.
 * @param gasLimit Initial gas limit.
 * @param gasPriceAdjustmentRate Gas price adjustment rate
 * @param genesisHeight Height of genesis block.
 * @param genesisTime Official time of blockchain start.
 * @param maxGasPrice Maximum gas price.
 * @param maxInflationRate Maximum inflation on the total supply every epoch.
 * @param maxKickoutStakePerc Max stake percentage of the validators we will kick out.
 * @param minGasPrice Minimum gas price. It is also the initial gas price.
 * @param minimumStakeDivisor The minimum stake required for staking is last seat price divided by this number.
 * @param minimumStakeRatio The lowest ratio s/s_total any block producer can have. See <https://github.com/near/NEPs/pull/167> for details
 * @param minimumValidatorsPerShard The minimum number of validators each shard must have
 * @param numBlockProducerSeats Number of block producer seats at genesis.
 * @param numBlockProducerSeatsPerShard Defines number of shards and number of block producer seats per each shard at genesis.
 * @param numBlocksPerYear Expected number of blocks per year
 * @param onlineMaxThreshold Online maximum threshold above which validator gets full reward.
 * @param onlineMinThreshold Online minimum threshold below which validator doesn't receive reward.
 * @param protocolRewardRate Protocol treasury rate
 * @param protocolTreasuryAccount Protocol treasury account
 * @param protocolUpgradeStakeThreshold Threshold of stake that needs to indicate that they ready for upgrade.
 * @param protocolVersion Current Protocol Version
 * @param runtimeConfig Runtime configuration (mostly economics constants).
 * @param shardLayout Layout information regarding how to split accounts to shards
 * @param shuffleShardAssignmentForChunkProducers If true, shuffle the chunk producers across shards. In other words, if the shard assignments were `[S_0, S_1, S_2, S_3]` where `S_i` represents the set of chunk producers for shard `i`, if this flag were true, the shard assignments might become, for example, `[S_2, S_0, S_3, S_1]`.
 * @param targetValidatorMandatesPerShard Number of target chunk validator mandates for each shard.
 * @param transactionValidityPeriod Number of blocks for which a given transaction is valid
 */


data class RpcProtocolConfigResponse (

    /* Expected number of hidden validators per shard. */
    @Json(name = "avg_hidden_validator_seats_per_shard")
    val avgHiddenValidatorSeatsPerShard: kotlin.collections.List<kotlin.Int>,

    /* Threshold for kicking out block producers, between 0 and 100. */
    @Json(name = "block_producer_kickout_threshold")
    val blockProducerKickoutThreshold: kotlin.Int,

    /* ID of the blockchain. This must be unique for every blockchain. If your testnet blockchains do not have unique chain IDs, you will have a bad time. */
    @Json(name = "chain_id")
    val chainId: kotlin.String,

    /* Threshold for kicking out chunk producers, between 0 and 100. */
    @Json(name = "chunk_producer_kickout_threshold")
    val chunkProducerKickoutThreshold: kotlin.Int,

    /* Threshold for kicking out nodes which are only chunk validators, between 0 and 100. */
    @Json(name = "chunk_validator_only_kickout_threshold")
    val chunkValidatorOnlyKickoutThreshold: kotlin.Int,

    /* Enable dynamic re-sharding. */
    @Json(name = "dynamic_resharding")
    val dynamicResharding: kotlin.Boolean,

    /* Epoch length counted in block heights. */
    @Json(name = "epoch_length")
    val epochLength: kotlin.Int,

    /* Fishermen stake threshold. */
    @Json(name = "fishermen_threshold")
    val fishermenThreshold: kotlin.String,

    /* Initial gas limit. */
    @Json(name = "gas_limit")
    val gasLimit: kotlin.Int,

    /* Gas price adjustment rate */
    @Json(name = "gas_price_adjustment_rate")
    val gasPriceAdjustmentRate: kotlin.collections.List<kotlin.Int>,

    /* Height of genesis block. */
    @Json(name = "genesis_height")
    val genesisHeight: kotlin.Int,

    /* Official time of blockchain start. */
    @Json(name = "genesis_time")
    val genesisTime: java.time.OffsetDateTime,

    /* Maximum gas price. */
    @Json(name = "max_gas_price")
    val maxGasPrice: kotlin.String,

    /* Maximum inflation on the total supply every epoch. */
    @Json(name = "max_inflation_rate")
    val maxInflationRate: kotlin.collections.List<kotlin.Int>,

    /* Max stake percentage of the validators we will kick out. */
    @Json(name = "max_kickout_stake_perc")
    val maxKickoutStakePerc: kotlin.Int,

    /* Minimum gas price. It is also the initial gas price. */
    @Json(name = "min_gas_price")
    val minGasPrice: kotlin.String,

    /* The minimum stake required for staking is last seat price divided by this number. */
    @Json(name = "minimum_stake_divisor")
    val minimumStakeDivisor: kotlin.Int,

    /* The lowest ratio s/s_total any block producer can have. See <https://github.com/near/NEPs/pull/167> for details */
    @Json(name = "minimum_stake_ratio")
    val minimumStakeRatio: kotlin.collections.List<kotlin.Int>,

    /* The minimum number of validators each shard must have */
    @Json(name = "minimum_validators_per_shard")
    val minimumValidatorsPerShard: kotlin.Int,

    /* Number of block producer seats at genesis. */
    @Json(name = "num_block_producer_seats")
    val numBlockProducerSeats: kotlin.Int,

    /* Defines number of shards and number of block producer seats per each shard at genesis. */
    @Json(name = "num_block_producer_seats_per_shard")
    val numBlockProducerSeatsPerShard: kotlin.collections.List<kotlin.Int>,

    /* Expected number of blocks per year */
    @Json(name = "num_blocks_per_year")
    val numBlocksPerYear: kotlin.Int,

    /* Online maximum threshold above which validator gets full reward. */
    @Json(name = "online_max_threshold")
    val onlineMaxThreshold: kotlin.collections.List<kotlin.Int>,

    /* Online minimum threshold below which validator doesn't receive reward. */
    @Json(name = "online_min_threshold")
    val onlineMinThreshold: kotlin.collections.List<kotlin.Int>,

    /* Protocol treasury rate */
    @Json(name = "protocol_reward_rate")
    val protocolRewardRate: kotlin.collections.List<kotlin.Int>,

    /* Protocol treasury account */
    @Json(name = "protocol_treasury_account")
    val protocolTreasuryAccount: kotlin.String,

    /* Threshold of stake that needs to indicate that they ready for upgrade. */
    @Json(name = "protocol_upgrade_stake_threshold")
    val protocolUpgradeStakeThreshold: kotlin.collections.List<kotlin.Int>,

    /* Current Protocol Version */
    @Json(name = "protocol_version")
    val protocolVersion: kotlin.Int,

    /* Runtime configuration (mostly economics constants). */
    @Json(name = "runtime_config")
    val runtimeConfig: RuntimeConfigView,

    /* Layout information regarding how to split accounts to shards */
    @Json(name = "shard_layout")
    val shardLayout: ShardLayout,

    /* If true, shuffle the chunk producers across shards. In other words, if the shard assignments were `[S_0, S_1, S_2, S_3]` where `S_i` represents the set of chunk producers for shard `i`, if this flag were true, the shard assignments might become, for example, `[S_2, S_0, S_3, S_1]`. */
    @Json(name = "shuffle_shard_assignment_for_chunk_producers")
    val shuffleShardAssignmentForChunkProducers: kotlin.Boolean,

    /* Number of target chunk validator mandates for each shard. */
    @Json(name = "target_validator_mandates_per_shard")
    val targetValidatorMandatesPerShard: kotlin.Int,

    /* Number of blocks for which a given transaction is valid */
    @Json(name = "transaction_validity_period")
    val transactionValidityPeriod: kotlin.Int

) {


}

