/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ActionErrorKindOneOf
import org.openapitools.client.models.ActionErrorKindOneOf1
import org.openapitools.client.models.ActionErrorKindOneOf10
import org.openapitools.client.models.ActionErrorKindOneOf10TriesToStake
import org.openapitools.client.models.ActionErrorKindOneOf11
import org.openapitools.client.models.ActionErrorKindOneOf11InsufficientStake
import org.openapitools.client.models.ActionErrorKindOneOf12
import org.openapitools.client.models.ActionErrorKindOneOf13
import org.openapitools.client.models.ActionErrorKindOneOf14
import org.openapitools.client.models.ActionErrorKindOneOf15
import org.openapitools.client.models.ActionErrorKindOneOf16
import org.openapitools.client.models.ActionErrorKindOneOf16DelegateActionSenderDoesNotMatchTxReceiver
import org.openapitools.client.models.ActionErrorKindOneOf17
import org.openapitools.client.models.ActionErrorKindOneOf18
import org.openapitools.client.models.ActionErrorKindOneOf18DelegateActionInvalidNonce
import org.openapitools.client.models.ActionErrorKindOneOf19
import org.openapitools.client.models.ActionErrorKindOneOf19DelegateActionNonceTooLarge
import org.openapitools.client.models.ActionErrorKindOneOf2
import org.openapitools.client.models.ActionErrorKindOneOf20
import org.openapitools.client.models.ActionErrorKindOneOf20GlobalContractDoesNotExist
import org.openapitools.client.models.ActionErrorKindOneOf2CreateAccountOnlyByRegistrar
import org.openapitools.client.models.ActionErrorKindOneOf3
import org.openapitools.client.models.ActionErrorKindOneOf3CreateAccountNotAllowed
import org.openapitools.client.models.ActionErrorKindOneOf4
import org.openapitools.client.models.ActionErrorKindOneOf4ActorNoPermission
import org.openapitools.client.models.ActionErrorKindOneOf5
import org.openapitools.client.models.ActionErrorKindOneOf5DeleteKeyDoesNotExist
import org.openapitools.client.models.ActionErrorKindOneOf6
import org.openapitools.client.models.ActionErrorKindOneOf7
import org.openapitools.client.models.ActionErrorKindOneOf8
import org.openapitools.client.models.ActionErrorKindOneOf8LackBalanceForState
import org.openapitools.client.models.ActionErrorKindOneOf9
import org.openapitools.client.models.ActionErrorKindOneOfAccountAlreadyExists
import org.openapitools.client.models.FunctionCallError
import org.openapitools.client.models.InvalidAccessKeyError
import org.openapitools.client.models.ReceiptValidationError

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param accountAlreadyExists 
 * @param accountDoesNotExist 
 * @param createAccountOnlyByRegistrar 
 * @param createAccountNotAllowed 
 * @param actorNoPermission 
 * @param deleteKeyDoesNotExist 
 * @param addKeyAlreadyExists 
 * @param deleteAccountStaking 
 * @param lackBalanceForState 
 * @param triesToUnstake 
 * @param triesToStake 
 * @param insufficientStake 
 * @param functionCallError 
 * @param newReceiptValidationError 
 * @param onlyImplicitAccountCreationAllowed 
 * @param deleteAccountWithLargeState 
 * @param delegateActionSenderDoesNotMatchTxReceiver 
 * @param delegateActionAccessKeyError 
 * @param delegateActionInvalidNonce 
 * @param delegateActionNonceTooLarge 
 * @param globalContractDoesNotExist 
 */


data class ActionErrorKind (

    @Json(name = "AccountAlreadyExists")
    val accountAlreadyExists: ActionErrorKindOneOfAccountAlreadyExists,

    @Json(name = "AccountDoesNotExist")
    val accountDoesNotExist: ActionErrorKindOneOfAccountAlreadyExists,

    @Json(name = "CreateAccountOnlyByRegistrar")
    val createAccountOnlyByRegistrar: ActionErrorKindOneOf2CreateAccountOnlyByRegistrar,

    @Json(name = "CreateAccountNotAllowed")
    val createAccountNotAllowed: ActionErrorKindOneOf3CreateAccountNotAllowed,

    @Json(name = "ActorNoPermission")
    val actorNoPermission: ActionErrorKindOneOf4ActorNoPermission,

    @Json(name = "DeleteKeyDoesNotExist")
    val deleteKeyDoesNotExist: ActionErrorKindOneOf5DeleteKeyDoesNotExist,

    @Json(name = "AddKeyAlreadyExists")
    val addKeyAlreadyExists: ActionErrorKindOneOf5DeleteKeyDoesNotExist,

    @Json(name = "DeleteAccountStaking")
    val deleteAccountStaking: ActionErrorKindOneOfAccountAlreadyExists,

    @Json(name = "LackBalanceForState")
    val lackBalanceForState: ActionErrorKindOneOf8LackBalanceForState,

    @Json(name = "TriesToUnstake")
    val triesToUnstake: ActionErrorKindOneOfAccountAlreadyExists,

    @Json(name = "TriesToStake")
    val triesToStake: ActionErrorKindOneOf10TriesToStake,

    @Json(name = "InsufficientStake")
    val insufficientStake: ActionErrorKindOneOf11InsufficientStake,

    @Json(name = "FunctionCallError")
    val functionCallError: FunctionCallError,

    @Json(name = "NewReceiptValidationError")
    val newReceiptValidationError: ReceiptValidationError,

    @Json(name = "OnlyImplicitAccountCreationAllowed")
    val onlyImplicitAccountCreationAllowed: ActionErrorKindOneOfAccountAlreadyExists,

    @Json(name = "DeleteAccountWithLargeState")
    val deleteAccountWithLargeState: ActionErrorKindOneOfAccountAlreadyExists,

    @Json(name = "DelegateActionSenderDoesNotMatchTxReceiver")
    val delegateActionSenderDoesNotMatchTxReceiver: ActionErrorKindOneOf16DelegateActionSenderDoesNotMatchTxReceiver,

    @Json(name = "DelegateActionAccessKeyError")
    val delegateActionAccessKeyError: InvalidAccessKeyError,

    @Json(name = "DelegateActionInvalidNonce")
    val delegateActionInvalidNonce: ActionErrorKindOneOf18DelegateActionInvalidNonce,

    @Json(name = "DelegateActionNonceTooLarge")
    val delegateActionNonceTooLarge: ActionErrorKindOneOf19DelegateActionNonceTooLarge,

    @Json(name = "GlobalContractDoesNotExist")
    val globalContractDoesNotExist: ActionErrorKindOneOf20GlobalContractDoesNotExist

) {


}

