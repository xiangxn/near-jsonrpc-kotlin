/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.DetailedDebugStatus
import org.openapitools.client.models.StatusSyncInfo
import org.openapitools.client.models.ValidatorInfo
import org.openapitools.client.models.Version

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param chainId Unique chain id.
 * @param genesisHash Genesis hash of the chain.
 * @param latestProtocolVersion Latest protocol version that this client supports.
 * @param nodePublicKey Public key of the node.
 * @param protocolVersion Currently active protocol version.
 * @param syncInfo Sync status of the node.
 * @param uptimeSec Uptime of the node.
 * @param validators Current epoch validators.
 * @param version Binary version.
 * @param detailedDebugStatus 
 * @param nodeKey 
 * @param rpcAddr Address for RPC server.  None if node doesn't have RPC endpoint enabled.
 * @param validatorAccountId NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
 * @param validatorPublicKey 
 */


data class RpcStatusResponse (

    /* Unique chain id. */
    @Json(name = "chain_id")
    val chainId: kotlin.String,

    /* Genesis hash of the chain. */
    @Json(name = "genesis_hash")
    val genesisHash: kotlin.String,

    /* Latest protocol version that this client supports. */
    @Json(name = "latest_protocol_version")
    val latestProtocolVersion: kotlin.Int,

    /* Public key of the node. */
    @Json(name = "node_public_key")
    val nodePublicKey: kotlin.String,

    /* Currently active protocol version. */
    @Json(name = "protocol_version")
    val protocolVersion: kotlin.Int,

    /* Sync status of the node. */
    @Json(name = "sync_info")
    val syncInfo: StatusSyncInfo,

    /* Uptime of the node. */
    @Json(name = "uptime_sec")
    val uptimeSec: kotlin.Long,

    /* Current epoch validators. */
    @Json(name = "validators")
    val validators: kotlin.collections.List<ValidatorInfo>,

    /* Binary version. */
    @Json(name = "version")
    val version: Version,

    @Json(name = "detailed_debug_status")
    val detailedDebugStatus: DetailedDebugStatus? = null,

    @Json(name = "node_key")
    val nodeKey: kotlin.String? = null,

    /* Address for RPC server.  None if node doesn't have RPC endpoint enabled. */
    @Json(name = "rpc_addr")
    val rpcAddr: kotlin.String? = null,

    /* NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ``` */
    @Json(name = "validator_account_id")
    val validatorAccountId: kotlin.String? = null,

    @Json(name = "validator_public_key")
    val validatorPublicKey: kotlin.String? = null

) {


}

