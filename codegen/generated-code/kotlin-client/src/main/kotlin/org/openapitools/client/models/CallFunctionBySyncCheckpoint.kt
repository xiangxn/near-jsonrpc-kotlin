/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.SyncCheckpoint

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param syncCheckpoint 
 * @param accountId NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
 * @param argsBase64 This type is used to mark function arguments.  NOTE: The main reason for this to exist (except the type-safety) is that the value is transparently serialized and deserialized as a base64-encoded string when serde is used (serde_json).
 * @param methodName 
 * @param requestType 
 */


data class CallFunctionBySyncCheckpoint (

    @Json(name = "sync_checkpoint")
    val syncCheckpoint: SyncCheckpoint,

    /* NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ``` */
    @Json(name = "account_id")
    val accountId: kotlin.String,

    /* This type is used to mark function arguments.  NOTE: The main reason for this to exist (except the type-safety) is that the value is transparently serialized and deserialized as a base64-encoded string when serde is used (serde_json). */
    @Json(name = "args_base64")
    val argsBase64: kotlin.String,

    @Json(name = "method_name")
    val methodName: kotlin.String,

    @Json(name = "request_type")
    val requestType: CallFunctionBySyncCheckpoint.RequestType

) {

    /**
     * 
     *
     * Values: call_function
     */
    @JsonClass(generateAdapter = false)
    enum class RequestType(val value: kotlin.String) {
        @Json(name = "call_function") call_function("call_function");
    }

}

