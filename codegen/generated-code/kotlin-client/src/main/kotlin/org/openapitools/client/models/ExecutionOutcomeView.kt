/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ExecutionMetadataView
import org.openapitools.client.models.ExecutionStatusView

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param executorId The id of the account on which the execution happens. For transaction this is signer_id, for receipt this is receiver_id.
 * @param gasBurnt The amount of the gas burnt by the given transaction or receipt.
 * @param logs Logs from this transaction or receipt.
 * @param receiptIds Receipt IDs generated by this transaction or receipt.
 * @param status Execution status. Contains the result in case of successful execution.
 * @param tokensBurnt The amount of tokens burnt corresponding to the burnt gas amount. This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because the prepaid gas price might be lower than the actual gas price and it creates a deficit. `tokens_burnt` also contains the penalty subtracted from refunds, while `gas_burnt` only contains the gas that we actually burn for the execution.
 * @param metadata Execution metadata, versioned
 */


data class ExecutionOutcomeView (

    /* The id of the account on which the execution happens. For transaction this is signer_id, for receipt this is receiver_id. */
    @Json(name = "executor_id")
    val executorId: kotlin.String,

    /* The amount of the gas burnt by the given transaction or receipt. */
    @Json(name = "gas_burnt")
    val gasBurnt: kotlin.Int,

    /* Logs from this transaction or receipt. */
    @Json(name = "logs")
    val logs: kotlin.collections.List<kotlin.String>,

    /* Receipt IDs generated by this transaction or receipt. */
    @Json(name = "receipt_ids")
    val receiptIds: kotlin.collections.List<kotlin.String>,

    /* Execution status. Contains the result in case of successful execution. */
    @Json(name = "status")
    val status: ExecutionStatusView,

    /* The amount of tokens burnt corresponding to the burnt gas amount. This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because the prepaid gas price might be lower than the actual gas price and it creates a deficit. `tokens_burnt` also contains the penalty subtracted from refunds, while `gas_burnt` only contains the gas that we actually burn for the execution. */
    @Json(name = "tokens_burnt")
    val tokensBurnt: kotlin.String,

    /* Execution metadata, versioned */
    @Json(name = "metadata")
    val metadata: ExecutionMetadataView? = null

) {


}

