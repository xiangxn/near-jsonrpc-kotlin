/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.BandwidthRequests
import org.openapitools.client.models.CongestionInfoView
import org.openapitools.client.models.ValidatorStakeView

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Contains main info about the chunk.
 *
 * @param balanceBurnt 
 * @param chunkHash 
 * @param encodedLength 
 * @param encodedMerkleRoot 
 * @param gasLimit 
 * @param gasUsed 
 * @param heightCreated 
 * @param heightIncluded 
 * @param outcomeRoot 
 * @param outgoingReceiptsRoot 
 * @param prevBlockHash 
 * @param prevStateRoot 
 * @param rentPaid TODO(2271): deprecated.
 * @param shardId The shard identifier. It may be an arbitrary number - it does not need to be a number in the range 0..NUM_SHARDS. The shard ids do not need to be sequential or contiguous.  The shard id is wrapped in a new type to prevent the old pattern of using indices in range 0..NUM_SHARDS and casting to ShardId. Once the transition if fully complete it potentially may be simplified to a regular type alias.
 * @param signature 
 * @param txRoot 
 * @param validatorProposals 
 * @param validatorReward TODO(2271): deprecated.
 * @param bandwidthRequests 
 * @param congestionInfo 
 */


data class ChunkHeaderView (

    @Json(name = "balance_burnt")
    val balanceBurnt: kotlin.String,

    @Json(name = "chunk_hash")
    val chunkHash: kotlin.String,

    @Json(name = "encoded_length")
    val encodedLength: kotlin.Int,

    @Json(name = "encoded_merkle_root")
    val encodedMerkleRoot: kotlin.String,

    @Json(name = "gas_limit")
    val gasLimit: kotlin.Int,

    @Json(name = "gas_used")
    val gasUsed: kotlin.Int,

    @Json(name = "height_created")
    val heightCreated: kotlin.Int,

    @Json(name = "height_included")
    val heightIncluded: kotlin.Int,

    @Json(name = "outcome_root")
    val outcomeRoot: kotlin.String,

    @Json(name = "outgoing_receipts_root")
    val outgoingReceiptsRoot: kotlin.String,

    @Json(name = "prev_block_hash")
    val prevBlockHash: kotlin.String,

    @Json(name = "prev_state_root")
    val prevStateRoot: kotlin.String,

    /* TODO(2271): deprecated. */
    @Json(name = "rent_paid")
    val rentPaid: kotlin.String,

    /* The shard identifier. It may be an arbitrary number - it does not need to be a number in the range 0..NUM_SHARDS. The shard ids do not need to be sequential or contiguous.  The shard id is wrapped in a new type to prevent the old pattern of using indices in range 0..NUM_SHARDS and casting to ShardId. Once the transition if fully complete it potentially may be simplified to a regular type alias. */
    @Json(name = "shard_id")
    val shardId: kotlin.Int,

    @Json(name = "signature")
    val signature: kotlin.String,

    @Json(name = "tx_root")
    val txRoot: kotlin.String,

    @Json(name = "validator_proposals")
    val validatorProposals: kotlin.collections.List<ValidatorStakeView>,

    /* TODO(2271): deprecated. */
    @Json(name = "validator_reward")
    val validatorReward: kotlin.String,

    @Json(name = "bandwidth_requests")
    val bandwidthRequests: BandwidthRequests? = null,

    @Json(name = "congestion_info")
    val congestionInfo: CongestionInfoView? = null

) {


}

