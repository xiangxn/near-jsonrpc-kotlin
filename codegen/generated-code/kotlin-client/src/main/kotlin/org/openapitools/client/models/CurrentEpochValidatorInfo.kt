/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Describes information about the current epoch validator
 *
 * @param accountId NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
 * @param isSlashed 
 * @param numExpectedBlocks 
 * @param numProducedBlocks 
 * @param publicKey 
 * @param shards Shards this validator is assigned to as chunk producer in the current epoch.
 * @param stake 
 * @param numExpectedChunks 
 * @param numExpectedChunksPerShard Number of chunks this validator was expected to produce in each shard. Each entry in the array corresponds to the shard in the `shards_produced` array.
 * @param numExpectedEndorsements 
 * @param numExpectedEndorsementsPerShard Number of chunks this validator was expected to validate and endorse in each shard. Each entry in the array corresponds to the shard in the `shards_endorsed` array.
 * @param numProducedChunks 
 * @param numProducedChunksPerShard 
 * @param numProducedEndorsements 
 * @param numProducedEndorsementsPerShard 
 * @param shardsEndorsed Shards this validator is assigned to as chunk validator in the current epoch.
 */


data class CurrentEpochValidatorInfo (

    /* NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ``` */
    @Json(name = "account_id")
    val accountId: kotlin.String,

    @Json(name = "is_slashed")
    val isSlashed: kotlin.Boolean,

    @Json(name = "num_expected_blocks")
    val numExpectedBlocks: kotlin.Int,

    @Json(name = "num_produced_blocks")
    val numProducedBlocks: kotlin.Int,

    @Json(name = "public_key")
    val publicKey: kotlin.String,

    /* Shards this validator is assigned to as chunk producer in the current epoch. */
    @Json(name = "shards")
    val shards: kotlin.collections.List<kotlin.Int>,

    @Json(name = "stake")
    val stake: kotlin.String,

    @Json(name = "num_expected_chunks")
    val numExpectedChunks: kotlin.Int? = 0,

    /* Number of chunks this validator was expected to produce in each shard. Each entry in the array corresponds to the shard in the `shards_produced` array. */
    @Json(name = "num_expected_chunks_per_shard")
    val numExpectedChunksPerShard: kotlin.collections.List<kotlin.Int>? = arrayListOf(),

    @Json(name = "num_expected_endorsements")
    val numExpectedEndorsements: kotlin.Int? = 0,

    /* Number of chunks this validator was expected to validate and endorse in each shard. Each entry in the array corresponds to the shard in the `shards_endorsed` array. */
    @Json(name = "num_expected_endorsements_per_shard")
    val numExpectedEndorsementsPerShard: kotlin.collections.List<kotlin.Int>? = arrayListOf(),

    @Json(name = "num_produced_chunks")
    val numProducedChunks: kotlin.Int? = 0,

    @Json(name = "num_produced_chunks_per_shard")
    val numProducedChunksPerShard: kotlin.collections.List<kotlin.Int>? = arrayListOf(),

    @Json(name = "num_produced_endorsements")
    val numProducedEndorsements: kotlin.Int? = 0,

    @Json(name = "num_produced_endorsements_per_shard")
    val numProducedEndorsementsPerShard: kotlin.collections.List<kotlin.Int>? = arrayListOf(),

    /* Shards this validator is assigned to as chunk validator in the current epoch. */
    @Json(name = "shards_endorsed")
    val shardsEndorsed: kotlin.collections.List<kotlin.Int>? = arrayListOf()

) {


}

