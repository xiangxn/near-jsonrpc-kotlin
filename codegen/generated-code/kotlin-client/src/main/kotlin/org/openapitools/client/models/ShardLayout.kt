/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ShardLayoutOneOf
import org.openapitools.client.models.ShardLayoutOneOf1
import org.openapitools.client.models.ShardLayoutOneOf2
import org.openapitools.client.models.ShardLayoutV0
import org.openapitools.client.models.ShardLayoutV1
import org.openapitools.client.models.ShardLayoutV2

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * A versioned struct that contains all information needed to assign accounts to shards.  Because of re-sharding, the chain may use different shard layout to split shards at different times. Currently, `ShardLayout` is stored as part of `EpochConfig`, which is generated each epoch given the epoch protocol version. In mainnet/testnet, we use two shard layouts since re-sharding has only happened once. It is stored as part of genesis config, see default_simple_nightshade_shard_layout() Below is an overview for some important functionalities of ShardLayout interface.
 *
 * @param V0 
 * @param V1 
 * @param V2 
 */


data class ShardLayout (

    @Json(name = "V0")
    val V0: ShardLayoutV0,

    @Json(name = "V1")
    val V1: ShardLayoutV1,

    @Json(name = "V2")
    val V2: ShardLayoutV2

) {


}

