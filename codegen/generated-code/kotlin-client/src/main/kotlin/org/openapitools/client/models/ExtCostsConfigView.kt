/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Typed view of ExtCostsConfig to preserve JSON output field names in protocol config RPC output.
 *
 * @param altBn128G1MultiexpBase Base cost for multiexp
 * @param altBn128G1MultiexpElement Per element cost for multiexp
 * @param altBn128G1SumBase Base cost for sum
 * @param altBn128G1SumElement Per element cost for sum
 * @param altBn128PairingCheckBase Base cost for pairing check
 * @param altBn128PairingCheckElement Per element cost for pairing check
 * @param base Base cost for calling a host function.
 * @param bls12381G1MultiexpBase 
 * @param bls12381G1MultiexpElement 
 * @param bls12381G2MultiexpBase 
 * @param bls12381G2MultiexpElement 
 * @param bls12381MapFp2ToG2Base 
 * @param bls12381MapFp2ToG2Element 
 * @param bls12381MapFpToG1Base 
 * @param bls12381MapFpToG1Element 
 * @param bls12381P1DecompressBase 
 * @param bls12381P1DecompressElement 
 * @param bls12381P1SumBase 
 * @param bls12381P1SumElement 
 * @param bls12381P2DecompressBase 
 * @param bls12381P2DecompressElement 
 * @param bls12381P2SumBase 
 * @param bls12381P2SumElement 
 * @param bls12381PairingBase 
 * @param bls12381PairingElement 
 * @param contractCompileBase 
 * @param contractCompileBytes 
 * @param contractLoadingBase Base cost of loading a pre-compiled contract
 * @param contractLoadingBytes Cost per byte of loading a pre-compiled contract
 * @param ecrecoverBase Cost of calling ecrecover
 * @param ed25519VerifyBase Cost of getting ed25519 base
 * @param ed25519VerifyByte Cost of getting ed25519 per byte
 * @param keccak256Base Cost of getting sha256 base
 * @param keccak256Byte Cost of getting sha256 per byte
 * @param keccak512Base Cost of getting sha256 base
 * @param keccak512Byte Cost of getting sha256 per byte
 * @param logBase Cost for calling logging.
 * @param logByte Cost for logging per byte
 * @param promiseAndBase Cost for calling `promise_and`
 * @param promiseAndPerPromise Cost for calling `promise_and` for each promise
 * @param promiseReturn Cost for calling `promise_return`
 * @param readCachedTrieNode Cost for reading trie node from memory
 * @param readMemoryBase Base cost for guest memory read
 * @param readMemoryByte Cost for guest memory read
 * @param readRegisterBase Base cost for reading from register
 * @param readRegisterByte Cost for reading byte from register
 * @param ripemd160Base Cost of getting ripemd160 base
 * @param ripemd160Block Cost of getting ripemd160 per message block
 * @param sha256Base Cost of getting sha256 base
 * @param sha256Byte Cost of getting sha256 per byte
 * @param storageHasKeyBase Storage trie check for key existence cost base
 * @param storageHasKeyByte Storage trie check for key existence per key byte
 * @param storageIterCreateFromByte Create trie range iterator cost per byte of from key.
 * @param storageIterCreatePrefixBase Create trie prefix iterator cost base
 * @param storageIterCreatePrefixByte Create trie prefix iterator cost per byte.
 * @param storageIterCreateRangeBase Create trie range iterator cost base
 * @param storageIterCreateToByte Create trie range iterator cost per byte of to key.
 * @param storageIterNextBase Trie iterator per key base cost
 * @param storageIterNextKeyByte Trie iterator next key byte cost
 * @param storageIterNextValueByte Trie iterator next key byte cost
 * @param storageLargeReadOverheadBase Storage trie read key overhead base cost, when doing large reads
 * @param storageLargeReadOverheadByte Storage trie read key overhead  per-byte cost, when doing large reads
 * @param storageReadBase Storage trie read key base cost
 * @param storageReadKeyByte Storage trie read key per byte cost
 * @param storageReadValueByte Storage trie read value cost per byte cost
 * @param storageRemoveBase Remove key from trie base cost
 * @param storageRemoveKeyByte Remove key from trie per byte cost
 * @param storageRemoveRetValueByte Remove key from trie ret value byte cost
 * @param storageWriteBase Storage trie write key base cost
 * @param storageWriteEvictedByte Storage trie write cost per byte of evicted value.
 * @param storageWriteKeyByte Storage trie write key per byte cost
 * @param storageWriteValueByte Storage trie write value per byte cost
 * @param touchingTrieNode Cost per reading trie node from DB
 * @param utf16DecodingBase Base cost of decoding utf16. It's used for `log_utf16`.
 * @param utf16DecodingByte Cost per byte of decoding utf16. It's used for `log_utf16`.
 * @param utf8DecodingBase Base cost of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
 * @param utf8DecodingByte Cost per byte of decoding utf8. It's used for `log_utf8` and `panic_utf8`.
 * @param validatorStakeBase Cost of calling `validator_stake`.
 * @param validatorTotalStakeBase Cost of calling `validator_total_stake`.
 * @param writeMemoryBase Base cost for guest memory write
 * @param writeMemoryByte Cost for guest memory write per byte
 * @param writeRegisterBase Base cost for writing into register
 * @param writeRegisterByte Cost for writing byte into register
 * @param yieldCreateBase Base cost for creating a yield promise.
 * @param yieldCreateByte Per byte cost of arguments and method name.
 * @param yieldResumeBase Base cost for resuming a yield receipt.
 * @param yieldResumeByte Per byte cost of resume payload.
 */


data class ExtCostsConfigView (

    /* Base cost for multiexp */
    @Json(name = "alt_bn128_g1_multiexp_base")
    val altBn128G1MultiexpBase: kotlin.Int,

    /* Per element cost for multiexp */
    @Json(name = "alt_bn128_g1_multiexp_element")
    val altBn128G1MultiexpElement: kotlin.Int,

    /* Base cost for sum */
    @Json(name = "alt_bn128_g1_sum_base")
    val altBn128G1SumBase: kotlin.Int,

    /* Per element cost for sum */
    @Json(name = "alt_bn128_g1_sum_element")
    val altBn128G1SumElement: kotlin.Int,

    /* Base cost for pairing check */
    @Json(name = "alt_bn128_pairing_check_base")
    val altBn128PairingCheckBase: kotlin.Int,

    /* Per element cost for pairing check */
    @Json(name = "alt_bn128_pairing_check_element")
    val altBn128PairingCheckElement: kotlin.Int,

    /* Base cost for calling a host function. */
    @Json(name = "base")
    val base: kotlin.Int,

    @Json(name = "bls12381_g1_multiexp_base")
    val bls12381G1MultiexpBase: kotlin.Int,

    @Json(name = "bls12381_g1_multiexp_element")
    val bls12381G1MultiexpElement: kotlin.Int,

    @Json(name = "bls12381_g2_multiexp_base")
    val bls12381G2MultiexpBase: kotlin.Int,

    @Json(name = "bls12381_g2_multiexp_element")
    val bls12381G2MultiexpElement: kotlin.Int,

    @Json(name = "bls12381_map_fp2_to_g2_base")
    val bls12381MapFp2ToG2Base: kotlin.Int,

    @Json(name = "bls12381_map_fp2_to_g2_element")
    val bls12381MapFp2ToG2Element: kotlin.Int,

    @Json(name = "bls12381_map_fp_to_g1_base")
    val bls12381MapFpToG1Base: kotlin.Int,

    @Json(name = "bls12381_map_fp_to_g1_element")
    val bls12381MapFpToG1Element: kotlin.Int,

    @Json(name = "bls12381_p1_decompress_base")
    val bls12381P1DecompressBase: kotlin.Int,

    @Json(name = "bls12381_p1_decompress_element")
    val bls12381P1DecompressElement: kotlin.Int,

    @Json(name = "bls12381_p1_sum_base")
    val bls12381P1SumBase: kotlin.Int,

    @Json(name = "bls12381_p1_sum_element")
    val bls12381P1SumElement: kotlin.Int,

    @Json(name = "bls12381_p2_decompress_base")
    val bls12381P2DecompressBase: kotlin.Int,

    @Json(name = "bls12381_p2_decompress_element")
    val bls12381P2DecompressElement: kotlin.Int,

    @Json(name = "bls12381_p2_sum_base")
    val bls12381P2SumBase: kotlin.Int,

    @Json(name = "bls12381_p2_sum_element")
    val bls12381P2SumElement: kotlin.Int,

    @Json(name = "bls12381_pairing_base")
    val bls12381PairingBase: kotlin.Int,

    @Json(name = "bls12381_pairing_element")
    val bls12381PairingElement: kotlin.Int,

    @Json(name = "contract_compile_base")
    val contractCompileBase: kotlin.Int,

    @Json(name = "contract_compile_bytes")
    val contractCompileBytes: kotlin.Int,

    /* Base cost of loading a pre-compiled contract */
    @Json(name = "contract_loading_base")
    val contractLoadingBase: kotlin.Int,

    /* Cost per byte of loading a pre-compiled contract */
    @Json(name = "contract_loading_bytes")
    val contractLoadingBytes: kotlin.Int,

    /* Cost of calling ecrecover */
    @Json(name = "ecrecover_base")
    val ecrecoverBase: kotlin.Int,

    /* Cost of getting ed25519 base */
    @Json(name = "ed25519_verify_base")
    val ed25519VerifyBase: kotlin.Int,

    /* Cost of getting ed25519 per byte */
    @Json(name = "ed25519_verify_byte")
    val ed25519VerifyByte: kotlin.Int,

    /* Cost of getting sha256 base */
    @Json(name = "keccak256_base")
    val keccak256Base: kotlin.Int,

    /* Cost of getting sha256 per byte */
    @Json(name = "keccak256_byte")
    val keccak256Byte: kotlin.Int,

    /* Cost of getting sha256 base */
    @Json(name = "keccak512_base")
    val keccak512Base: kotlin.Int,

    /* Cost of getting sha256 per byte */
    @Json(name = "keccak512_byte")
    val keccak512Byte: kotlin.Int,

    /* Cost for calling logging. */
    @Json(name = "log_base")
    val logBase: kotlin.Int,

    /* Cost for logging per byte */
    @Json(name = "log_byte")
    val logByte: kotlin.Int,

    /* Cost for calling `promise_and` */
    @Json(name = "promise_and_base")
    val promiseAndBase: kotlin.Int,

    /* Cost for calling `promise_and` for each promise */
    @Json(name = "promise_and_per_promise")
    val promiseAndPerPromise: kotlin.Int,

    /* Cost for calling `promise_return` */
    @Json(name = "promise_return")
    val promiseReturn: kotlin.Int,

    /* Cost for reading trie node from memory */
    @Json(name = "read_cached_trie_node")
    val readCachedTrieNode: kotlin.Int,

    /* Base cost for guest memory read */
    @Json(name = "read_memory_base")
    val readMemoryBase: kotlin.Int,

    /* Cost for guest memory read */
    @Json(name = "read_memory_byte")
    val readMemoryByte: kotlin.Int,

    /* Base cost for reading from register */
    @Json(name = "read_register_base")
    val readRegisterBase: kotlin.Int,

    /* Cost for reading byte from register */
    @Json(name = "read_register_byte")
    val readRegisterByte: kotlin.Int,

    /* Cost of getting ripemd160 base */
    @Json(name = "ripemd160_base")
    val ripemd160Base: kotlin.Int,

    /* Cost of getting ripemd160 per message block */
    @Json(name = "ripemd160_block")
    val ripemd160Block: kotlin.Int,

    /* Cost of getting sha256 base */
    @Json(name = "sha256_base")
    val sha256Base: kotlin.Int,

    /* Cost of getting sha256 per byte */
    @Json(name = "sha256_byte")
    val sha256Byte: kotlin.Int,

    /* Storage trie check for key existence cost base */
    @Json(name = "storage_has_key_base")
    val storageHasKeyBase: kotlin.Int,

    /* Storage trie check for key existence per key byte */
    @Json(name = "storage_has_key_byte")
    val storageHasKeyByte: kotlin.Int,

    /* Create trie range iterator cost per byte of from key. */
    @Json(name = "storage_iter_create_from_byte")
    val storageIterCreateFromByte: kotlin.Int,

    /* Create trie prefix iterator cost base */
    @Json(name = "storage_iter_create_prefix_base")
    val storageIterCreatePrefixBase: kotlin.Int,

    /* Create trie prefix iterator cost per byte. */
    @Json(name = "storage_iter_create_prefix_byte")
    val storageIterCreatePrefixByte: kotlin.Int,

    /* Create trie range iterator cost base */
    @Json(name = "storage_iter_create_range_base")
    val storageIterCreateRangeBase: kotlin.Int,

    /* Create trie range iterator cost per byte of to key. */
    @Json(name = "storage_iter_create_to_byte")
    val storageIterCreateToByte: kotlin.Int,

    /* Trie iterator per key base cost */
    @Json(name = "storage_iter_next_base")
    val storageIterNextBase: kotlin.Int,

    /* Trie iterator next key byte cost */
    @Json(name = "storage_iter_next_key_byte")
    val storageIterNextKeyByte: kotlin.Int,

    /* Trie iterator next key byte cost */
    @Json(name = "storage_iter_next_value_byte")
    val storageIterNextValueByte: kotlin.Int,

    /* Storage trie read key overhead base cost, when doing large reads */
    @Json(name = "storage_large_read_overhead_base")
    val storageLargeReadOverheadBase: kotlin.Int,

    /* Storage trie read key overhead  per-byte cost, when doing large reads */
    @Json(name = "storage_large_read_overhead_byte")
    val storageLargeReadOverheadByte: kotlin.Int,

    /* Storage trie read key base cost */
    @Json(name = "storage_read_base")
    val storageReadBase: kotlin.Int,

    /* Storage trie read key per byte cost */
    @Json(name = "storage_read_key_byte")
    val storageReadKeyByte: kotlin.Int,

    /* Storage trie read value cost per byte cost */
    @Json(name = "storage_read_value_byte")
    val storageReadValueByte: kotlin.Int,

    /* Remove key from trie base cost */
    @Json(name = "storage_remove_base")
    val storageRemoveBase: kotlin.Int,

    /* Remove key from trie per byte cost */
    @Json(name = "storage_remove_key_byte")
    val storageRemoveKeyByte: kotlin.Int,

    /* Remove key from trie ret value byte cost */
    @Json(name = "storage_remove_ret_value_byte")
    val storageRemoveRetValueByte: kotlin.Int,

    /* Storage trie write key base cost */
    @Json(name = "storage_write_base")
    val storageWriteBase: kotlin.Int,

    /* Storage trie write cost per byte of evicted value. */
    @Json(name = "storage_write_evicted_byte")
    val storageWriteEvictedByte: kotlin.Int,

    /* Storage trie write key per byte cost */
    @Json(name = "storage_write_key_byte")
    val storageWriteKeyByte: kotlin.Int,

    /* Storage trie write value per byte cost */
    @Json(name = "storage_write_value_byte")
    val storageWriteValueByte: kotlin.Int,

    /* Cost per reading trie node from DB */
    @Json(name = "touching_trie_node")
    val touchingTrieNode: kotlin.Int,

    /* Base cost of decoding utf16. It's used for `log_utf16`. */
    @Json(name = "utf16_decoding_base")
    val utf16DecodingBase: kotlin.Int,

    /* Cost per byte of decoding utf16. It's used for `log_utf16`. */
    @Json(name = "utf16_decoding_byte")
    val utf16DecodingByte: kotlin.Int,

    /* Base cost of decoding utf8. It's used for `log_utf8` and `panic_utf8`. */
    @Json(name = "utf8_decoding_base")
    val utf8DecodingBase: kotlin.Int,

    /* Cost per byte of decoding utf8. It's used for `log_utf8` and `panic_utf8`. */
    @Json(name = "utf8_decoding_byte")
    val utf8DecodingByte: kotlin.Int,

    /* Cost of calling `validator_stake`. */
    @Json(name = "validator_stake_base")
    val validatorStakeBase: kotlin.Int,

    /* Cost of calling `validator_total_stake`. */
    @Json(name = "validator_total_stake_base")
    val validatorTotalStakeBase: kotlin.Int,

    /* Base cost for guest memory write */
    @Json(name = "write_memory_base")
    val writeMemoryBase: kotlin.Int,

    /* Cost for guest memory write per byte */
    @Json(name = "write_memory_byte")
    val writeMemoryByte: kotlin.Int,

    /* Base cost for writing into register */
    @Json(name = "write_register_base")
    val writeRegisterBase: kotlin.Int,

    /* Cost for writing byte into register */
    @Json(name = "write_register_byte")
    val writeRegisterByte: kotlin.Int,

    /* Base cost for creating a yield promise. */
    @Json(name = "yield_create_base")
    val yieldCreateBase: kotlin.Int,

    /* Per byte cost of arguments and method name. */
    @Json(name = "yield_create_byte")
    val yieldCreateByte: kotlin.Int,

    /* Base cost for resuming a yield receipt. */
    @Json(name = "yield_resume_base")
    val yieldResumeBase: kotlin.Int,

    /* Per byte cost of resume payload. */
    @Json(name = "yield_resume_byte")
    val yieldResumeByte: kotlin.Int

) {


}

