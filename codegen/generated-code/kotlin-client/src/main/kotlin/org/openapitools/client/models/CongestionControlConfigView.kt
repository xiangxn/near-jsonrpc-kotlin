/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The configuration for congestion control. More info about congestion [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
 *
 * @param allowedShardOutgoingGas How much gas the chosen allowed shard can send to a 100% congested shard.  See [`CongestionControlConfig`] for more details.
 * @param maxCongestionIncomingGas How much gas in delayed receipts of a shard is 100% incoming congestion.  See [`CongestionControlConfig`] for more details.
 * @param maxCongestionMemoryConsumption How much memory space of all delayed and buffered receipts in a shard is considered 100% congested.  See [`CongestionControlConfig`] for more details.
 * @param maxCongestionMissedChunks How many missed chunks in a row in a shard is considered 100% congested.
 * @param maxCongestionOutgoingGas How much gas in outgoing buffered receipts of a shard is 100% congested.  Outgoing congestion contributes to overall congestion, which reduces how much other shards are allowed to forward to this shard.
 * @param maxOutgoingGas The maximum amount of gas attached to receipts a shard can forward to another shard per chunk.  See [`CongestionControlConfig`] for more details.
 * @param maxTxGas The maximum amount of gas in a chunk spent on converting new transactions to receipts.  See [`CongestionControlConfig`] for more details.
 * @param minOutgoingGas The minimum gas each shard can send to a shard that is not fully congested.  See [`CongestionControlConfig`] for more details.
 * @param minTxGas The minimum amount of gas in a chunk spent on converting new transactions to receipts, as long as the receiving shard is not congested.  See [`CongestionControlConfig`] for more details.
 * @param outgoingReceiptsBigSizeLimit Large size limit for outgoing receipts to a shard, used when it's safe to send a lot of receipts without making the state witness too large. It limits the total sum of outgoing receipts, not individual receipts.
 * @param outgoingReceiptsUsualSizeLimit The standard size limit for outgoing receipts aimed at a single shard. This limit is pretty small to keep the size of source_receipt_proofs under control. It limits the total sum of outgoing receipts, not individual receipts.
 * @param rejectTxCongestionThreshold How much congestion a shard can tolerate before it stops all shards from accepting new transactions with the receiver set to the congested shard.
 */


data class CongestionControlConfigView (

    /* How much gas the chosen allowed shard can send to a 100% congested shard.  See [`CongestionControlConfig`] for more details. */
    @Json(name = "allowed_shard_outgoing_gas")
    val allowedShardOutgoingGas: kotlin.Int,

    /* How much gas in delayed receipts of a shard is 100% incoming congestion.  See [`CongestionControlConfig`] for more details. */
    @Json(name = "max_congestion_incoming_gas")
    val maxCongestionIncomingGas: kotlin.Int,

    /* How much memory space of all delayed and buffered receipts in a shard is considered 100% congested.  See [`CongestionControlConfig`] for more details. */
    @Json(name = "max_congestion_memory_consumption")
    val maxCongestionMemoryConsumption: kotlin.Int,

    /* How many missed chunks in a row in a shard is considered 100% congested. */
    @Json(name = "max_congestion_missed_chunks")
    val maxCongestionMissedChunks: kotlin.Int,

    /* How much gas in outgoing buffered receipts of a shard is 100% congested.  Outgoing congestion contributes to overall congestion, which reduces how much other shards are allowed to forward to this shard. */
    @Json(name = "max_congestion_outgoing_gas")
    val maxCongestionOutgoingGas: kotlin.Int,

    /* The maximum amount of gas attached to receipts a shard can forward to another shard per chunk.  See [`CongestionControlConfig`] for more details. */
    @Json(name = "max_outgoing_gas")
    val maxOutgoingGas: kotlin.Int,

    /* The maximum amount of gas in a chunk spent on converting new transactions to receipts.  See [`CongestionControlConfig`] for more details. */
    @Json(name = "max_tx_gas")
    val maxTxGas: kotlin.Int,

    /* The minimum gas each shard can send to a shard that is not fully congested.  See [`CongestionControlConfig`] for more details. */
    @Json(name = "min_outgoing_gas")
    val minOutgoingGas: kotlin.Int,

    /* The minimum amount of gas in a chunk spent on converting new transactions to receipts, as long as the receiving shard is not congested.  See [`CongestionControlConfig`] for more details. */
    @Json(name = "min_tx_gas")
    val minTxGas: kotlin.Int,

    /* Large size limit for outgoing receipts to a shard, used when it's safe to send a lot of receipts without making the state witness too large. It limits the total sum of outgoing receipts, not individual receipts. */
    @Json(name = "outgoing_receipts_big_size_limit")
    val outgoingReceiptsBigSizeLimit: kotlin.Int,

    /* The standard size limit for outgoing receipts aimed at a single shard. This limit is pretty small to keep the size of source_receipt_proofs under control. It limits the total sum of outgoing receipts, not individual receipts. */
    @Json(name = "outgoing_receipts_usual_size_limit")
    val outgoingReceiptsUsualSizeLimit: kotlin.Int,

    /* How much congestion a shard can tolerate before it stops all shards from accepting new transactions with the receiver set to the congested shard. */
    @Json(name = "reject_tx_congestion_threshold")
    val rejectTxCongestionThreshold: kotlin.Double

) {


}

